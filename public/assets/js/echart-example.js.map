{"version":3,"sources":["utils.js","echarts-utils.js","area-pieces-chart.js","bar-line-mixed-chart.js","bar-negative-chart.js","bar-race-chart.js","bar-series-chart.js","bar-stacked-chart.js","bar-timeline-chart.js","bar-waterfall-chart.js","basic-bar-chart.js","basic-candlestick-chart.js","basic-gauge-chart.js","basic-line-chart.js","bubble-chart.js","candle-stick-mixed-chart.js","doughnut-chart.js","doughnut-rounded-chart.js","dynamic-line-chart.js","gauge-grade-chart.js","gauge-multi-ring-chart.js","gauge-multi-title-chart.js","gauge-progress-chart.js","gauge-ring-chart.js","gradient-bar-chart.js","heatmap-chart.js","heatmap-single-series-chart.js","horizontal-bar-chart.js","line-area-chart.js","line-gradient-chart.js","line-log-chart.js","line-marker-chart.js","line-race-chart.js","line-share-dataset-chart.js","map-usa.js","nested-pies-chart.js","pie-chart.js","pie-edge-align-chart.js","pie-label-align-chart.js","pie-multiple-chart.js","radar-chart.js","radar-customized-chart.js","radar-multiple-chart.js","scatter-basic-chart.js","scatter-quartet.js","scatter-single-axis-chart.js","stacked-area-chart.js","stacked-horizontal-bar-chart.js","stacked-line-chart.js","stacked-vertical-chart.js","step-line-chart.js","echarts-example.js"],"names":["docReady","fn","document","readyState","addEventListener","setTimeout","resize","window","isIterableArray","array","Array","isArray","length","camelize","str","text","replace","_","c","toUpperCase","concat","substr","toLowerCase","getData","el","data","JSON","parse","dataset","e","hexToRgb","hexValue","hex","indexOf","substring","result","exec","m","r","g","b","parseInt","rgbaColor","color","arguments","undefined","alpha","getColor","name","dom","documentElement","getComputedStyle","getPropertyValue","trim","getColors","primary","secondary","success","info","warning","danger","light","dark","getSubtleColors","getGrays","white","100","200","300","400","500","600","700","800","900","1000","1100","black","hasClass","className","classList","value","includes","addClass","add","removeClass","remove","getOffset","rect","getBoundingClientRect","scrollLeft","pageXOffset","scrollTop","pageYOffset","top","left","isScrolledIntoView","windowHeight","innerHeight","clientHeight","windowWidth","innerWidth","clientWidth","vertInView","height","horInView","width","breakpoints","xs","sm","md","lg","xl","xxl","getBreakpoint","breakpoint","classes","split","filter","cls","pop","setCookie","expire","expires","Date","setTime","getTime","cookie","toUTCString","getCookie","keyValue","match","settings","tinymce","theme","chart","borderColor","newChart","config","ctx","getContext","Chart","getItemFromStore","key","defaultValue","store","localStorage","getItem","_unused","setItemToStore","payload","setItem","getStoreSpace","parseFloat","escape","encodeURIComponent","stringify","toFixed","getDates","startDate","endDate","interval","from","v","i","valueOf","getPastDates","duration","days","date","setDate","getDate","getRandomNumber","min","max","Math","floor","random","utils","getPosition","pos","params","size","contentSize","echartSetOption","userOptions","getDefaultOptions","themeController","body","setOption","merge","_ref","detail","control","tooltipFormatter","tooltipItem","forEach","seriesName","_typeof","dayjs","axisValue","isValid","format","echartsAreaPiecesChartInit","$areaPiecesChartEl","querySelector","echarts","init","tooltip","trigger","padding","backgroundColor","textStyle","borderWidth","transitionDuration","position","axisPointer","type","formatter","xAxis","boundaryGap","axisLine","lineStyle","axisTick","show","axisLabel","margin","splitLine","yAxis","visualMap","dimension","seriesIndex","pieces","gt","lt","series","smooth","symbol","markLine","label","areaStyle","grid","right","bottom","containLabel","echartsBarLineChartInit","months","$barLineChartEl","crossStyle","toolbox","feature","dataView","magicType","restore","saveAsImage","iconStyle","emphasis","textFill","legend","slice","itemStyle","barBorderRadius","yAxisIndex","symbolSize","echartsBarNegativeChartInit","$barNegativeChartEl","stack","echartsBarRaceChartInit","run","$barRaceChartEl","keys","map","round","inverse","animationDuration","animationDurationUpdate","realtimeSort","fontWeight","valueAnimation","animationEasing","animationEasingUpdate","item","setInterval","echartsBarSeriesChartInit","$barSeriesChartEl","echartsBarStackedChartInit","$barStackedChartEl","xAxisData","data1","data2","data3","data4","push","emphasisStyle","shadowBlur","shadowColor","splitArea","echartsBarTimelineChartInit","dataMap","dataFormatter","$barTimelineChartEl","dataTI","obj","Object","reduce","acc","val","_objectSpread","_defineProperty","index","2005","2006","2007","2008","2009","2010","2011","dataSI","dataPI","baseOption","timeline","axisType","autoPlay","playInterval","s","getFullYear","checkpointStyle","shadowOffsetX","shadowOffsetY","controlStyle","title","calculable","options","echartsWaterFallChartInit","$waterfallChartEl","tar","barBorderColor","echartsBasicBarChartInit","$barChartEl","showSymbol","hoverAnimation","echartsBasicCandlestickChartInit","$basicCandleStickChartEl","dataZoom","start","end","minValueSpan","scale","splitNumber","color0","borderColor0","echartsBasicGaugeChartInit","$basicGaugeChartEl","radius","echartsLineChartInit","$lineChartEl","echartsBubbleChartInit","$bubbleChartEl","sqrt","focus","param","echartsCandlestickMixedChartInit","colorList","dates","dataMA5","$candleStickMixedChartEl","dayCount","len","sum","j","animation","elRect","viewSize","link","xAxisIndex","realtime","handleIcon","handleSize","gridIndex","triggerTooltip","echartsDoughnutChartInit","$doughnutChartEl","center","avoidLabelOverlap","labelLine","echartsDoughnutRoundedChartInit","$doughnutRoundedChartEl","orient","borderRadius","echartsDynamicLineChartInit","$dynamicLineChartEl","randomData","now","toString","getMonth","join","shift","echartsGaugeGradeChartInit","$gaugeGradeChartEl","startAngle","endAngle","pointer","icon","offsetCenter","distance","echartsGaugeMultiRingChartInit","$gaugeMultiRingChartEl","progress","overlap","roundCap","clip","echartsGaugeMultiTitleChartInit","$gaugeMultiTitleChartEl","anchor","showAbove","fontSize","echartsGaugeProgressChartInit","$gaugeProgressChartEl","echartsGaugeRingChartInit","$gaugeRingChartEl","echartsGradientBarChartInit","dataAxis","$gradientBarChartEl","inside","z","showBackground","graphic","LinearGradient","offset","on","dispatchAction","startValue","dataIndex","zoomSize","endValue","echartsHeatMapChartInit","$echartHeatmapChart","hours","inRange","echartsHeatMapSingleSeriesChartInit","gradientColor","echartsHorizontalBarChartInit","$horizontalBarChartEl","echartsLineAreaChartInit","$lineAreaChartEl","x","y","x2","y2","colorStops","echartsLineGradientChartInit","dateList","valueList","$lineGradientChartEl","echartsLineLogChartInit","$lineLogChartEl","echartsLineMarkerChartInit","$lineMarkerChartEl","markPoint","echartsLineRaceChartInit","$lineRaceChartEl","echartsLineShareDatasetChartInit","$lineShareChartEl","showContent","source","seriesLayoutBy","id","encode","itemName","event","xAxisInfo","axesInfo","echartsUsaMapInit","$usaMapEl","zoom","roam","scaleLimit","areaColor","echartsNestedPiesChartInit","marketingExpenses","detailedExpenses","$echartsNestedPies","rich","per","selectedMode","barWidth","lineHeight","initChart","removeEventListener","echartsPieChartInit","$pieChartEl","echartsPieEdgeAlignChartInit","$echartPieAEdgeAlignChartEl","subtext","textAlign","subtextStyle","alignTo","echartsPieLabelAlignChartInit","$echartPieLabelAlignChartEl","bleedMargin","defaultRadius","smallRadius","echartsPieMultipleChartInit","$echartPieMultipleChartEl","echartsRadarChartInit","$radarChartEl","radar","indicator","echartsRadarCustomizedChartInit","getFormatter","indicators","num","shape","radarIndex","echartsRadarMultipleChartInit","getCenter","month","echartsScatterBasicChartInit","$basicScatterChartEl","echartsScatterQuartetChartInit","dataAll","markLineOpt","gridMdUp","gridMdDown","$scatterQuartetChartEl","align","coord","echartsScatterSingleAxisChartInit","$scatterSingleAxisChartEl","animationDelay","idx","echartsStackedAreaChartInit","$stackedAreaChartEl","echartsHorizontalStackedChartInit","$horizontalStackChartEl","echartsStackedLineChartInit","$stackedLineChartEl","echartsStackedVerticalChartInit","$stackedVerticalChart","echartsStepLineChartInit","$stepLineChartEl","step"],"mappings":"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","file":"echart-example.js","sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                                    Utils                                   */\n/* -------------------------------------------------------------------------- */\nconst docReady = (fn) => {\n  // see if DOM is already available\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", fn);\n  } else {\n    setTimeout(fn, 1);\n  }\n};\n\nconst resize = (fn) => window.addEventListener(\"resize\", fn);\n\nconst isIterableArray = (array) => Array.isArray(array) && !!array.length;\n\nconst camelize = (str) => {\n  const text = str.replace(/[-_\\s.]+(.)?/g, (_, c) =>\n    c ? c.toUpperCase() : \"\"\n  );\n  return `${text.substr(0, 1).toLowerCase()}${text.substr(1)}`;\n};\n\nconst getData = (el, data) => {\n  try {\n    return JSON.parse(el.dataset[camelize(data)]);\n  } catch (e) {\n    return el.dataset[camelize(data)];\n  }\n};\n\n/* ----------------------------- Colors function ---------------------------- */\n\nconst hexToRgb = (hexValue) => {\n  let hex;\n  hexValue.indexOf(\"#\") === 0\n    ? (hex = hexValue.substring(1))\n    : (hex = hexValue);\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(\n    hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\n  );\n  return result\n    ? [\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16),\n      ]\n    : null;\n};\n\nconst rgbaColor = (color = \"#fff\", alpha = 0.5) =>\n  `rgba(${hexToRgb(color)}, ${alpha})`;\n\n/* --------------------------------- Colors --------------------------------- */\n\nconst getColor = (name, dom = document.documentElement) =>\n  getComputedStyle(dom).getPropertyValue(`--falcon-${name}`).trim();\n\nconst getColors = (dom) => ({\n  primary: getColor(\"primary\", dom),\n  secondary: getColor(\"secondary\", dom),\n  success: getColor(\"success\", dom),\n  info: getColor(\"info\", dom),\n  warning: getColor(\"warning\", dom),\n  danger: getColor(\"danger\", dom),\n  light: getColor(\"light\", dom),\n  dark: getColor(\"dark\", dom),\n});\n\nconst getSubtleColors = (dom) => ({\n  primary: getColor(\"primary-bg-subtle\", dom),\n  secondary: getColor(\"secondary-bg-subtle\", dom),\n  success: getColor(\"success-bg-subtle\", dom),\n  info: getColor(\"info-bg-subtle\", dom),\n  warning: getColor(\"warning-bg-subtle\", dom),\n  danger: getColor(\"danger-bg-subtle\", dom),\n  light: getColor(\"light-bg-subtle\", dom),\n  dark: getColor(\"dark-bg-subtle\", dom),\n});\n\nconst getGrays = (dom) => ({\n  white: getColor(\"gray-white\", dom),\n  100: getColor(\"gray-100\", dom),\n  200: getColor(\"gray-200\", dom),\n  300: getColor(\"gray-300\", dom),\n  400: getColor(\"gray-400\", dom),\n  500: getColor(\"gray-500\", dom),\n  600: getColor(\"gray-600\", dom),\n  700: getColor(\"gray-700\", dom),\n  800: getColor(\"gray-800\", dom),\n  900: getColor(\"gray-900\", dom),\n  1000: getColor(\"gray-1000\", dom),\n  1100: getColor(\"gray-1100\", dom),\n  black: getColor(\"gray-black\", dom),\n});\n\nconst hasClass = (el, className) => {\n  !el && false;\n  return el.classList.value.includes(className);\n};\n\nconst addClass = (el, className) => {\n  el.classList.add(className);\n};\n\nconst removeClass = (el, className) => {\n  el.classList.remove(className);\n};\n\nconst getOffset = (el) => {\n  const rect = el.getBoundingClientRect();\n  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n  return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\n};\n\nfunction isScrolledIntoView(el) {\n  const rect = el.getBoundingClientRect();\n  const windowHeight =\n    window.innerHeight || document.documentElement.clientHeight;\n  const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n\n  const vertInView = rect.top <= windowHeight && rect.top + rect.height >= 0;\n  const horInView = rect.left <= windowWidth && rect.left + rect.width >= 0;\n\n  return vertInView && horInView;\n}\n\nconst breakpoints = {\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1540,\n};\n\nconst getBreakpoint = (el) => {\n  const classes = el && el.classList.value;\n  let breakpoint;\n  if (classes) {\n    breakpoint =\n      breakpoints[\n        classes\n          .split(\" \")\n          .filter((cls) => cls.includes(\"navbar-expand-\"))\n          .pop()\n          .split(\"-\")\n          .pop()\n      ];\n  }\n  return breakpoint;\n};\n\n/* --------------------------------- Cookie --------------------------------- */\n\nconst setCookie = (name, value, expire) => {\n  const expires = new Date();\n  expires.setTime(expires.getTime() + expire);\n  document.cookie = `${name}=${value};expires=${expires.toUTCString()}`;\n};\n\nconst getCookie = (name) => {\n  const keyValue = document.cookie.match(`(^|;) ?${name}=([^;]*)(;|$)`);\n  return keyValue ? keyValue[2] : keyValue;\n};\n\nconst settings = {\n  tinymce: {\n    theme: \"oxide\",\n  },\n  chart: {\n    borderColor: \"rgba(255, 255, 255, 0.8)\",\n  },\n};\n\n/* -------------------------- Chart Initialization -------------------------- */\n\nconst newChart = (chart, config) => {\n  const ctx = chart.getContext(\"2d\");\n  return new window.Chart(ctx, config);\n};\n\n/* ---------------------------------- Store --------------------------------- */\n\nconst getItemFromStore = (key, defaultValue, store = localStorage) => {\n  try {\n    return JSON.parse(store.getItem(key)) || defaultValue;\n  } catch {\n    return store.getItem(key) || defaultValue;\n  }\n};\n\nconst setItemToStore = (key, payload, store = localStorage) =>\n  store.setItem(key, payload);\nconst getStoreSpace = (store = localStorage) =>\n  parseFloat(\n    (\n      escape(encodeURIComponent(JSON.stringify(store))).length /\n      (1024 * 1024)\n    ).toFixed(2)\n  );\n\n/* get Dates between */\n\nconst getDates = (startDate, endDate, interval = 1000 * 60 * 60 * 24) => {\n  const duration = endDate - startDate;\n  const steps = duration / interval;\n  return Array.from(\n    { length: steps + 1 },\n    (v, i) => new Date(startDate.valueOf() + interval * i)\n  );\n};\n\nconst getPastDates = (duration) => {\n  let days;\n\n  switch (duration) {\n    case \"week\":\n      days = 7;\n      break;\n    case \"month\":\n      days = 30;\n      break;\n    case \"year\":\n      days = 365;\n      break;\n\n    default:\n      days = duration;\n  }\n\n  const date = new Date();\n  const endDate = date;\n  const startDate = new Date(new Date().setDate(date.getDate() - (days - 1)));\n  return getDates(startDate, endDate);\n};\n\n/* Get Random Number */\nconst getRandomNumber = (min, max) =>\n  Math.floor(Math.random() * (max - min) + min);\n\nconst utils = {\n  docReady,\n  breakpoints,\n  resize,\n  isIterableArray,\n  camelize,\n  getData,\n  hasClass,\n  addClass,\n  hexToRgb,\n  rgbaColor,\n  getColor,\n  getColors,\n  getSubtleColors,\n  getGrays,\n  getOffset,\n  isScrolledIntoView,\n  getBreakpoint,\n  setCookie,\n  getCookie,\n  newChart,\n  settings,\n  getItemFromStore,\n  setItemToStore,\n  getStoreSpace,\n  getDates,\n  getPastDates,\n  getRandomNumber,\n  removeClass,\n};\n\nexport default utils;\n","/* eslint-disable */\nconst getPosition = (pos, params, dom, rect, size) => ({\n  top: pos[1] - size.contentSize[1] - 10,\n  left: pos[0] - size.contentSize[0] / 2\n});\n\nconst echartSetOption = (chart, userOptions, getDefaultOptions) => {\n  const themeController = document.body;\n  // Merge user options with lodash\n  chart.setOption(window._.merge(getDefaultOptions(), userOptions));\n\n  themeController.addEventListener('clickControl', ({ detail: { control } }) => {\n    if (control === 'theme') {\n      chart.setOption(window._.merge(getDefaultOptions(), userOptions));\n    }\n  });\n};\n\nconst tooltipFormatter = params => {\n  let tooltipItem = ``;\n  params.forEach(el => {\n    tooltipItem =\n      tooltipItem +\n      `<div class='ms-1'>\n        <h6 class=\"text-700\"><span class=\"fas fa-circle me-1 fs--2\" style=\"color:${el.borderColor ? el.borderColor : el.color\n      }\"></span>\n          ${el.seriesName} : ${typeof el.value === 'object' ? el.value[1] : el.value}\n        </h6>\n      </div>`;\n  });\n  return `<div>\n            <p class='mb-2 text-600'>\n              ${window.dayjs(params[0].axisValue).isValid()\n      ? window.dayjs(params[0].axisValue).format('MMMM DD')\n      : params[0].axisValue\n    }\n            </p>\n            ${tooltipItem}\n          </div>`;\n};\n\nexport default { getPosition, echartSetOption, tooltipFormatter };\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                      Echarts Area Pieces Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsAreaPiecesChartInit = () => {\n  const $areaPiecesChartEl = document.querySelector('.echart-area-pieces-chart-example');\n\n  if ($areaPiecesChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($areaPiecesChartEl, 'options');\n    const chart = window.echarts.init($areaPiecesChartEl);\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        },\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'category',\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          margin: 15,\n          formatter: value => window.dayjs(value).format('MMM DD')\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      visualMap: {\n        type: 'piecewise',\n        show: false,\n        dimension: 0,\n        seriesIndex: 0,\n        pieces: [\n          {\n            gt: 1,\n            lt: 3,\n            color: utils.rgbaColor(utils.getColor('primary'), 0.4)\n          },\n          {\n            gt: 5,\n            lt: 7,\n            color: utils.rgbaColor(utils.getColor('primary'), 0.4)\n          }\n        ]\n      },\n      series: [\n        {\n          type: 'line',\n          name: 'Total',\n          smooth: 0.6,\n          symbol: 'none',\n          lineStyle: {\n            color: utils.getColor('primary'),\n            width: 5\n          },\n          markLine: {\n            symbol: ['none', 'none'],\n            label: { show: false },\n            data: [{ xAxis: 1 }, { xAxis: 3 }, { xAxis: 5 }, { xAxis: 7 }]\n          },\n          areaStyle: {},\n          data: [\n            ['2019-10-10', 200],\n            ['2019-10-11', 560],\n            ['2019-10-12', 750],\n            ['2019-10-13', 580],\n            ['2019-10-14', 250],\n            ['2019-10-15', 300],\n            ['2019-10-16', 450],\n            ['2019-10-17', 300],\n            ['2019-10-18', 100]\n          ]\n        }\n      ],\n      grid: { right: 20, left: 5, bottom: 5, top: 8, containLabel: true }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsAreaPiecesChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBarLineChartInit = () => {\n  const $barLineChartEl = document.querySelector('.echart-bar-line-chart-example');\n\n  if ($barLineChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barLineChartEl, 'options');\n    const chart = window.echarts.init($barLineChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross',\n          crossStyle: {\n            color: utils.getGrays()['500']\n          },\n          label: {\n            show: true,\n            backgroundColor: utils.getGrays()['600'],\n            color: utils.getGrays()['100']\n          }\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: tooltipFormatter\n      },\n      toolbox: {\n        top: 0,\n        feature: {\n          dataView: { show: false },\n          magicType: {\n            show: true,\n            type: ['line', 'bar']\n          },\n          restore: { show: true },\n          saveAsImage: { show: true }\n        },\n        iconStyle: {\n          borderColor: utils.getGrays()['700'],\n          borderWidth: 1\n        },\n\n        emphasis: {\n          iconStyle: {\n            textFill: utils.getGrays()['600']\n          }\n        }\n      },\n      legend: {\n        top: 40,\n        data: ['Evaporation', 'Precipitation', 'Average temperature'],\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      xAxis: [\n        {\n          type: 'category',\n          data: months,\n          axisLabel: {\n            color: utils.getGrays()['600'],\n            formatter: value => value.slice(0, 3)\n          },\n          axisPointer: {\n            type: 'shadow'\n          },\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: utils.getGrays()['300']\n            }\n          }\n        }\n      ],\n      yAxis: [\n        {\n          type: 'value',\n          min: 0,\n          max: 250,\n          interval: 50,\n          axisLabel: {\n            color: utils.getGrays()['600'],\n            formatter: '{value} ml'\n          },\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: utils.getGrays()['200']\n            }\n          }\n        },\n        {\n          type: 'value',\n          min: 0,\n          max: 25,\n          interval: 5,\n          axisLabel: {\n            color: utils.getGrays()['600'],\n            formatter: '{value} °C'\n          },\n\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: utils.getGrays()['200']\n            }\n          }\n        }\n      ],\n      series: [\n        {\n          name: 'Evaporation',\n          type: 'bar',\n          data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3],\n          itemStyle: {\n            color: utils.getColor('primary'),\n            barBorderRadius: [3, 3, 0, 0]\n          }\n        },\n        {\n          name: 'Precipitation',\n          type: 'bar',\n          data: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3],\n          itemStyle: {\n            color: utils.getColor('info'),\n            barBorderRadius: [3, 3, 0, 0]\n          }\n        },\n        {\n          name: 'Average temperature',\n          type: 'line',\n          yAxisIndex: 1,\n          data: [2.0, 2.2, 3.3, 4.5, 6.3, 10.2, 20.3, 23.4, 23.0, 16.5, 12.0, 6.2],\n          lineStyle: {\n            color: utils.getColor('warning')\n          },\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('warning'),\n            borderWidth: 2\n          },\n          symbol: 'circle',\n          symbolSize: 10\n        }\n      ],\n      grid: {\n        right: 5,\n        left: 5,\n        bottom: 5,\n        top: '23%',\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBarLineChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBarNegativeChartInit = () => {\n  const $barNegativeChartEl = document.querySelector('.echart-bar-chart-negative-example');\n\n  if ($barNegativeChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barNegativeChartEl, 'options');\n    const chart = window.echarts.init($barNegativeChartEl);\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'shadow'\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: tooltipFormatter\n      },\n      grid: {\n        top: 5,\n        bottom: 5,\n        left: 5,\n        right: 5\n      },\n      xAxis: {\n        type: 'value',\n        position: 'top',\n        splitLine: {\n          lineStyle: {\n            type: 'dashed',\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      yAxis: {\n        type: 'category',\n        axisLine: { show: false },\n        axisLabel: { show: false },\n        axisTick: { show: false },\n        splitLine: { show: false },\n        data: ['Ten', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\n      },\n      series: [\n        {\n          name: 'Cost',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true,\n            formatter: '{b}',\n            color: '#fff'\n          },\n          itemStyle: {\n            color: utils.getColor('primary')\n          },\n          data: [-0.12, -0.19, 0.2, 0.44, -0.23, 0.08, -0.17, 0.47, -0.36, 0.18]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBarNegativeChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                         Echarts Bar Race Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBarRaceChartInit = () => {\n  const $barRaceChartEl = document.querySelector('.echart-bar-race-chart-example');\n\n  if ($barRaceChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barRaceChartEl, 'options');\n    const chart = window.echarts.init($barRaceChartEl);\n\n    let data = Array.from(Array(7).keys()).map(() => Math.round(Math.random() * 200));\n\n    const getDefaultOptions = () => ({\n      xAxis: {\n        max: 'dataMax',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        axisLabel: {\n          color: utils.getGrays()['500']\n        }\n      },\n      yAxis: {\n        type: 'category',\n        data: ['A', 'B', 'C', 'D', 'E', 'F', 'G'],\n        inverse: true,\n        axisLabel: {\n          color: utils.getGrays()['500']\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisTick: {\n          show: false\n        },\n        animationDuration: 300,\n        animationDurationUpdate: 300,\n        max: 4 // only the largest 5 bars will be displayed\n      },\n      series: [\n        {\n          realtimeSort: true,\n          name: 'X',\n          type: 'bar',\n          data: data,\n          label: {\n            show: true,\n            position: 'right',\n            color: utils.getGrays()['700'],\n            fontWeight: 500,\n            valueAnimation: true\n          },\n          itemStyle: {\n            color: utils.getColor('primary'),\n            barBorderRadius: [0, 3, 3, 0]\n          }\n        }\n      ],\n      animationDuration: 0,\n      animationDurationUpdate: 3000,\n      animationEasing: 'linear',\n      animationEasingUpdate: 'linear',\n      grid: {\n        right: '10%',\n        left: 5,\n        bottom: 5,\n        top: 5,\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    const run = () => {\n      data = data.map(item =>\n        Math.random() > 0.9\n          ? item + Math.round(Math.random() * 2000)\n          : item + Math.round(Math.random() * 200)\n      );\n\n      chart.setOption({\n        series: [\n          {\n            data\n          }\n        ]\n      });\n    };\n\n    setTimeout(function () {\n      run();\n    }, 0);\n    setInterval(function () {\n      run();\n    }, 3000);\n  }\n};\n\nexport default echartsBarRaceChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBarSeriesChartInit = () => {\n  const $barSeriesChartEl = document.querySelector('.echart-bar-chart-series-example');\n\n  if ($barSeriesChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barSeriesChartEl, 'options');\n    const chart = window.echarts.init($barSeriesChartEl);\n\n    const getDefaultOptions = () => ({\n      color: [utils.getColor('primary'), utils.getColor('info')],\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'shadow'\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'value',\n        axisLabel: {\n          formatter: value => `${value / 1000}k`,\n          color: utils.getGrays()['500']\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        splitLine: {\n          lineStyle: {\n            type: 'dashed',\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      yAxis: {\n        type: 'category',\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisLabel: {\n          color: utils.getGrays()['500']\n        },\n        axisTick: { show: false },\n        splitLine: { show: false },\n        data: ['Brazil', 'Indonesia', 'USA', 'India', 'China']\n      },\n      series: [\n        {\n          name: '2011',\n          type: 'bar',\n          data: [18203, 23489, 29034, 104970, 131744],\n          itemStyle: {\n            barBorderRadius: [0, 3, 3, 0]\n          }\n        },\n        {\n          name: '2012',\n          type: 'bar',\n          data: [19325, 23438, 31000, 121594, 134141],\n          itemStyle: {\n            barBorderRadius: [0, 3, 3, 0]\n          }\n        }\n      ],\n      grid: { right: 15, left: '12%', bottom: '10%', top: 5 }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBarSeriesChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBarStackedChartInit = () => {\n  const $barStackedChartEl = document.querySelector('.echart-bar-stacked-chart-example');\n\n  if ($barStackedChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barStackedChartEl, 'options');\n    const chart = window.echarts.init($barStackedChartEl);\n\n    let xAxisData = [];\n    let data1 = [];\n    let data2 = [];\n    let data3 = [];\n    let data4 = [];\n\n    for (let i = 0; i < 10; i += 1) {\n      xAxisData.push('Class' + (i + 1));\n      data1.push((Math.random() * 2).toFixed(2));\n      data2.push((Math.random() * 5).toFixed(2));\n      data3.push((Math.random() + 0.3).toFixed(2));\n      data4.push(-Math.random().toFixed(2));\n    }\n\n    const emphasisStyle = {\n      itemStyle: {\n        shadowBlur: 10,\n        shadowColor: utils.rgbaColor(utils.getColor('dark'), 0.3)\n      }\n    };\n\n    const getDefaultOptions = () => ({\n      color: [\n        utils.getColor('primary'),\n        utils.getColor('info'),\n        utils.getColor('warning'),\n        utils.getColor('danger')\n      ],\n      legend: {\n        data: ['Bar1', 'Bar2', 'Bar3', 'Bar4'],\n        textStyle: {\n          color: utils.getGrays()['700']\n        },\n        left: 0\n      },\n      toolbox: {\n        feature: {\n          magicType: {\n            type: ['stack', 'tiled']\n          }\n        },\n        iconStyle: {\n          borderColor: utils.getGrays()['700'],\n          borderWidth: 1\n        }\n      },\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      xAxis: {\n        data: xAxisData,\n        splitLine: { show: false },\n        splitArea: { show: false },\n\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['400']\n          }\n        }\n      },\n      yAxis: {\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        axisLabel: {\n          color: utils.getGrays()['600']\n        }\n      },\n      series: [\n        {\n          name: 'Bar1',\n          type: 'bar',\n          stack: 'one',\n          emphasis: emphasisStyle,\n          data: data1\n        },\n        {\n          name: 'Bar2',\n          type: 'bar',\n          stack: 'one',\n          emphasis: emphasisStyle,\n          data: data2\n        },\n        {\n          name: 'Bar3',\n          type: 'bar',\n          stack: 'two',\n          emphasis: emphasisStyle,\n          data: data3\n        },\n        {\n          name: 'Bar4',\n          type: 'bar',\n          stack: 'two',\n          emphasis: emphasisStyle,\n          data: data4\n        }\n      ],\n      grid: {\n        top: '10%',\n        bottom: 10,\n        left: 5,\n        right: 7,\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBarStackedChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                         Echarts Bar Timeline Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBarTimelineChartInit = () => {\n  const $barTimelineChartEl = document.querySelector('.echart-bar-timeline-chart-example');\n\n  if ($barTimelineChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barTimelineChartEl, 'options');\n    const chart = window.echarts.init($barTimelineChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    let dataMap = {};\n\n    const dataFormatter = obj => {\n      return Object.keys(obj).reduce((acc, val) => {\n        return {\n          ...acc,\n          [val]: obj[val].map((value, index) => ({\n            name: months[index],\n            value\n          }))\n        };\n      }, {});\n    };\n\n    dataMap.dataTI = dataFormatter({\n      2005: [\n        88.68, 112.38, 1400, 262.42, 589.56, 882.41, 625.61, 684.6, 90.26, 1461.51, 892.83, 966.5\n      ],\n      2006: [\n        88.8, 103.35, 1461.81, 276.77, 634.94, 939.43, 672.76, 750.14, 93.81, 1545.05, 925.1,\n        1011.03\n      ],\n      2007: [\n        101.26, 110.19, 1804.72, 311.97, 762.1, 1133.42, 783.8, 915.38, 101.84, 1816.31, 986.02,\n        1200.18\n      ],\n      2008: [\n        112.83, 122.58, 2034.59, 313.58, 907.95, 1302.02, 916.72, 1088.94, 111.8, 2100.11, 1095.96,\n        1418.09\n      ],\n      2009: [\n        118.29, 128.85, 2207.34, 477.59, 929.6, 1414.9, 980.57, 1154.33, 113.82, 2261.86, 1163.08,\n        1495.45\n      ],\n      2010: [\n        124.36, 145.58, 2562.81, 554.48, 1095.28, 1631.08, 1050.15, 1302.9, 114.15, 2540.1, 1360.56,\n        1729.02\n      ],\n      2011: [\n        136.27, 159.72, 2905.73, 641.42, 1306.3, 1915.57, 1277.44, 1701.5, 124.94, 3064.78, 1583.04,\n        2015.31\n      ]\n    });\n\n    dataMap.dataSI = dataFormatter({\n      2005: [\n        2026.51, 2135.07, 5271.57, 2357.04, 1773.21, 3869.4, 1580.83, 2971.68, 4381.2, 10524.96,\n        7164.75, 2245.9\n      ],\n      2006: [\n        2191.43, 2457.08, 6110.43, 2755.66, 2374.96, 4566.83, 1915.29, 3365.31, 4969.95, 12282.89,\n        8511.51, 2711.18\n      ],\n      2007: [\n        2509.4, 2892.53, 7201.88, 3454.49, 3193.67, 5544.14, 2475.45, 3695.58, 5571.06, 14471.26,\n        10154.25, 3370.96\n      ],\n      2008: [\n        2626.41, 3709.78, 8701.34, 4242.36, 4376.19, 7158.84, 3097.12, 4319.75, 6085.84, 16993.34,\n        11567.42, 4198.93\n      ],\n      2009: [\n        2855.55, 3987.84, 8959.83, 3993.8, 5114, 7906.34, 3541.92, 4060.72, 6001.78, 18566.37,\n        11908.49, 4905.22\n      ],\n      2010: [\n        3388.38, 4840.23, 10707.68, 5234, 6367.69, 9976.82, 4506.31, 5025.15, 7218.32, 21753.93,\n        14297.93, 6436.62\n      ],\n      2011: [\n        3752.48, 5928.32, 13126.86, 6635.26, 8037.69, 12152.15, 5611.48, 5962.41, 7927.89, 25203.28,\n        16555.58, 8309.38\n      ]\n    });\n\n    dataMap.dataPI = dataFormatter({\n      2005: [\n        4854.33, 1658.19, 3340.54, 1611.07, 1542.26, 3295.45, 1413.83, 1857.42, 4776.2, 6612.22,\n        5360.1, 2137.77\n      ],\n      2006: [\n        5837.55, 1902.31, 3895.36, 1846.18, 1934.35, 3798.26, 1687.07, 2096.35, 5508.48, 7914.11,\n        6281.86, 2390.29\n      ],\n      2007: [\n        7236.15, 2250.04, 4600.72, 2257.99, 2467.41, 4486.74, 2025.44, 2493.04, 6821.11, 9730.91,\n        7613.46, 2789.78\n      ],\n      2008: [\n        8375.76, 2886.65, 5276.04, 2759.46, 3212.06, 5207.72, 2412.26, 2905.68, 7872.23, 11888.53,\n        8799.31, 3234.64\n      ],\n      2009: [\n        9179.19, 3405.16, 6068.31, 2886.92, 3696.65, 5891.25, 2756.26, 3371.95, 8930.85, 13629.07,\n        9918.78, 3662.15\n      ],\n      2010: [\n        10600.84, 4238.65, 7123.77, 3412.38, 4209.03, 6849.37, 3111.12, 4040.55, 9833.51, 17131.45,\n        12063.82, 4193.69\n      ],\n      2011: [\n        12363.18, 5219.24, 8483.17, 3960.87, 5015.89, 8158.98, 3679.91, 4918.09, 11142.86, 20842.21,\n        14180.23, 4975.96\n      ]\n    });\n\n    const getDefaultOptions = () => ({\n      baseOption: {\n        timeline: {\n          axisType: 'category',\n          autoPlay: false,\n          playInterval: 1000,\n          data: [\n            '2005-01-01',\n            '2006-01-01',\n            '2007-01-01',\n            '2008-01-01',\n            '2009-01-01',\n            '2010-01-01',\n            '2011-01-01'\n          ],\n          label: {\n            formatter: function (s) {\n              return new Date(s).getFullYear();\n            }\n          },\n          lineStyle: {\n            color: utils.getColor('info')\n          },\n          itemStyle: {\n            color: utils.getColor('secondary')\n          },\n          checkpointStyle: {\n            color: utils.getColor('primary'),\n            shadowBlur: 0,\n            shadowOffsetX: 0,\n            shadowOffsetY: 0\n          },\n          controlStyle: {\n            color: utils.getColor('info')\n          }\n        },\n        title: {\n          textStyle: {\n            color: utils.getGrays()['700']\n          }\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'shadow'\n          },\n          padding: [7, 10],\n          backgroundColor: utils.getGrays()['100'],\n          borderColor: utils.getGrays()['300'],\n          textStyle: { color: utils.getColors().dark },\n          borderWidth: 1,\n          transitionDuration: 0,\n          formatter: tooltipFormatter\n        },\n        legend: {\n          left: 'right',\n          data: ['Primary industry', 'Secondary industry', 'Tertiary Industry'],\n          textStyle: {\n            color: utils.getGrays()['700']\n          }\n        },\n        calculable: true,\n        xAxis: [\n          {\n            type: 'category',\n            data: months,\n            splitLine: { show: false },\n            axisLabel: {\n              color: utils.getGrays()['600']\n            },\n            axisLine: {\n              lineStyle: {\n                color: utils.getGrays()['400']\n              }\n            }\n          }\n        ],\n        yAxis: [\n          {\n            type: 'value',\n            axisLabel: {\n              formatter: value => `${value / 1000}k`,\n              color: utils.getGrays()['600']\n            },\n            splitLine: {\n              lineStyle: {\n                color: utils.getGrays()['200']\n              }\n            }\n          }\n        ],\n        series: [\n          {\n            name: 'Primary industry',\n            type: 'bar',\n            itemStyle: {\n              color: utils.getColor('primary'),\n              barBorderRadius: [3, 3, 0, 0]\n            }\n          },\n          {\n            name: 'Secondary industry',\n            type: 'bar',\n            itemStyle: {\n              color: utils.getColor('info'),\n              barBorderRadius: [3, 3, 0, 0]\n            }\n          },\n          {\n            name: 'Tertiary Industry',\n            type: 'bar',\n            itemStyle: {\n              color: utils.getColor('warning'),\n              barBorderRadius: [3, 3, 0, 0]\n            }\n          }\n        ],\n        grid: {\n          top: '10%',\n          bottom: '15%',\n          left: 5,\n          right: 10,\n          containLabel: true\n        }\n      },\n      options: [\n        {\n          title: { text: '2005' },\n          series: [\n            { data: dataMap.dataPI['2005'] },\n            { data: dataMap.dataSI['2005'] },\n            { data: dataMap.dataTI['2005'] }\n          ]\n        },\n        {\n          title: { text: '2006' },\n          series: [\n            { data: dataMap.dataPI['2006'] },\n            { data: dataMap.dataSI['2006'] },\n            { data: dataMap.dataTI['2006'] }\n          ]\n        },\n        {\n          title: { text: '2007' },\n          series: [\n            { data: dataMap.dataPI['2007'] },\n            { data: dataMap.dataSI['2007'] },\n            { data: dataMap.dataTI['2007'] }\n          ]\n        },\n        {\n          title: { text: '2008' },\n          series: [\n            { data: dataMap.dataPI['2008'] },\n            { data: dataMap.dataSI['2008'] },\n            { data: dataMap.dataTI['2008'] }\n          ]\n        },\n        {\n          title: { text: '2009' },\n          series: [\n            { data: dataMap.dataPI['2009'] },\n            { data: dataMap.dataSI['2009'] },\n            { data: dataMap.dataTI['2009'] }\n          ]\n        },\n        {\n          title: { text: '2010' },\n          series: [\n            { data: dataMap.dataPI['2010'] },\n            { data: dataMap.dataSI['2010'] },\n            { data: dataMap.dataTI['2010'] }\n          ]\n        },\n        {\n          title: { text: '2011' },\n          series: [\n            { data: dataMap.dataPI['2011'] },\n            { data: dataMap.dataSI['2011'] },\n            { data: dataMap.dataTI['2011'] }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBarTimelineChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsWaterFallChartInit = () => {\n  const $waterfallChartEl = document.querySelector('.echart-nightfall-chart-example');\n\n  if ($waterfallChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($waterfallChartEl, 'options');\n    const chart = window.echarts.init($waterfallChartEl);\n\n    const days = [\n      '2021-06-05',\n      '2021-06-06',\n      '2021-06-07',\n      '2021-06-08',\n      '2021-06-09',\n      '2021-06-10',\n      '2021-06-11',\n      '2021-06-12',\n      '2021-06-13',\n      '2021-06-14',\n      '2021-06-15'\n    ];\n\n    const getDefaultOptions = () => ({\n      legend: {\n        data: ['Expenditure', 'Income'],\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        /* eslint-disable prefer-destructuring */\n        formatter: function (params) {\n          var tar;\n          if (params[1].value !== '-') {\n            tar = params[1];\n          } else {\n            tar = params[2];\n          }\n          return (\n            window.dayjs(tar.name).format('MMM DD') + '<br/>' + tar.seriesName + ' : ' + tar.value\n          );\n        },\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'shadow'\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: days,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          formatter: value => window.dayjs(value).format('MMM DD'),\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        boundaryGap: true,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        axisTick: { show: false },\n        axisLine: { show: false },\n        min: 600\n      },\n      series: [\n        {\n          name: 'Assist',\n          type: 'bar',\n          stack: 'Total',\n          itemStyle: {\n            barBorderColor: 'transparent',\n            color: 'transparent'\n          },\n          emphasis: {\n            itemStyle: {\n              barBorderColor: 'transparent',\n              color: 'transparent'\n            }\n          },\n          data: [0, 900, 1245, 1530, 1376, 1376, 1511, 1689, 1856, 1495, 1292]\n        },\n        {\n          name: 'Income',\n          type: 'bar',\n          stack: 'Total',\n          label: {\n            show: true,\n            position: 'top',\n            color: utils.getGrays()['600']\n          },\n          data: [900, 345, 393, '-', '-', 135, 178, 286, '-', '-', '-'],\n          itemStyle: {\n            color: utils.getColor('primary'),\n            barBorderRadius: [3, 3, 0, 0]\n          }\n        },\n        {\n          name: 'Expenditure',\n          type: 'bar',\n          stack: 'Total',\n          label: {\n            show: true,\n            position: 'bottom',\n            color: utils.getGrays()['600']\n          },\n          data: ['-', '-', '-', 108, 154, '-', '-', '-', 119, 361, 203],\n          itemStyle: {\n            color: utils.getColor('success'),\n            barBorderRadius: [3, 3, 0, 0]\n          }\n        }\n      ],\n      grid: { right: '3%', left: '10%', bottom: '10%', top: '10%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsWaterFallChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBasicBarChartInit = () => {\n  const $barChartEl = document.querySelector('.echart-basic-bar-chart-example');\n\n  if ($barChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barChartEl, 'options');\n    const chart = window.echarts.init($barChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    const data = [1272, 1301, 1402, 1216, 1086, 1236, 1219, 1330, 1367, 1416, 1297, 1204];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: months,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          formatter: value => value.substring(0, 3),\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        boundaryGap: true,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        axisTick: { show: false },\n        axisLine: { show: false },\n        min: 600\n      },\n      series: [\n        {\n          type: 'bar',\n          name: 'Total',\n          data,\n          lineStyle: { color: utils.getColor('primary') },\n          itemStyle: {\n            color: utils.getColor('primary'),\n            barBorderRadius: [3, 3, 0, 0]\n          },\n          showSymbol: false,\n          symbol: 'circle',\n          smooth: false,\n          hoverAnimation: true\n        }\n      ],\n      grid: { right: '3%', left: '10%', bottom: '10%', top: '5%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBasicBarChartInit;\n","/* eslint-disable */\nimport utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBasicCandlestickChartInit = () => {\n  const $basicCandleStickChartEl = document.querySelector('.echart-candlestick-chart-example');\n\n  if ($basicCandleStickChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($basicCandleStickChartEl, 'options');\n    const chart = window.echarts.init($basicCandleStickChartEl);\n\n    const data = [\n      ['2013/1/24', 2320.26, 2320.26, 2287.3, 2362.94],\n      ['2013/1/25', 2300, 2291.3, 2288.26, 2308.38],\n      ['2013/1/28', 2295.35, 2346.5, 2295.35, 2346.92],\n      ['2013/1/29', 2347.22, 2358.98, 2337.35, 2363.8],\n      ['2013/1/30', 2360.75, 2382.48, 2347.89, 2383.76],\n      ['2013/1/31', 2383.43, 2385.42, 2371.23, 2391.82],\n      ['2013/2/1', 2377.41, 2419.02, 2369.57, 2421.15],\n      ['2013/2/4', 2425.92, 2428.15, 2417.58, 2440.38],\n      ['2013/2/5', 2411, 2433.13, 2403.3, 2437.42],\n      ['2013/2/6', 2432.68, 2434.48, 2427.7, 2441.73],\n      ['2013/2/7', 2430.69, 2418.53, 2394.22, 2433.89],\n      ['2013/2/8', 2416.62, 2432.4, 2414.4, 2443.03],\n      ['2013/2/18', 2441.91, 2421.56, 2415.43, 2444.8],\n      ['2013/2/19', 2420.26, 2382.91, 2373.53, 2427.07],\n      ['2013/2/20', 2383.49, 2397.18, 2370.61, 2397.94],\n      ['2013/2/21', 2378.82, 2325.95, 2309.17, 2378.82],\n      ['2013/2/22', 2322.94, 2314.16, 2308.76, 2330.88],\n      ['2013/2/25', 2320.62, 2325.82, 2315.01, 2338.78],\n      ['2013/2/26', 2313.74, 2293.34, 2289.89, 2340.71],\n      ['2013/2/27', 2297.77, 2313.22, 2292.03, 2324.63],\n      ['2013/2/28', 2322.32, 2365.59, 2308.92, 2366.16],\n      ['2013/3/1', 2364.54, 2359.51, 2330.86, 2369.65],\n      ['2013/3/4', 2332.08, 2273.4, 2259.25, 2333.54],\n      ['2013/3/5', 2274.81, 2326.31, 2270.1, 2328.14],\n      ['2013/3/6', 2333.61, 2347.18, 2321.6, 2351.44],\n      ['2013/3/7', 2340.44, 2324.29, 2304.27, 2352.02],\n      ['2013/3/8', 2326.42, 2318.61, 2314.59, 2333.67],\n      ['2013/3/11', 2314.68, 2310.59, 2296.58, 2320.96],\n      ['2013/3/12', 2309.16, 2286.6, 2264.83, 2333.29],\n      ['2013/3/13', 2282.17, 2263.97, 2253.25, 2286.33],\n      ['2013/3/14', 2255.77, 2270.28, 2253.31, 2276.22],\n      ['2013/3/15', 2269.31, 2278.4, 2250, 2312.08],\n      ['2013/3/18', 2267.29, 2240.02, 2239.21, 2276.05],\n      ['2013/3/19', 2244.26, 2257.43, 2232.02, 2261.31],\n      ['2013/3/20', 2257.74, 2317.37, 2257.42, 2317.86],\n      ['2013/3/21', 2318.21, 2324.24, 2311.6, 2330.81],\n      ['2013/3/22', 2321.4, 2328.28, 2314.97, 2332],\n      ['2013/3/25', 2334.74, 2326.72, 2319.91, 2344.89],\n      ['2013/3/26', 2318.58, 2297.67, 2281.12, 2319.99],\n      ['2013/3/27', 2299.38, 2301.26, 2289, 2323.48],\n      ['2013/3/28', 2273.55, 2236.3, 2232.91, 2273.55],\n      ['2013/3/29', 2238.49, 2236.62, 2228.81, 2246.87],\n      ['2013/4/1', 2229.46, 2234.4, 2227.31, 2243.95],\n      ['2013/4/2', 2234.9, 2227.74, 2220.44, 2253.42],\n      ['2013/4/3', 2232.69, 2225.29, 2217.25, 2241.34],\n      ['2013/4/8', 2196.24, 2211.59, 2180.67, 2212.59],\n      ['2013/4/9', 2215.47, 2225.77, 2215.47, 2234.73],\n      ['2013/4/10', 2224.93, 2226.13, 2212.56, 2233.04],\n      ['2013/4/11', 2236.98, 2219.55, 2217.26, 2242.48],\n      ['2013/4/12', 2218.09, 2206.78, 2204.44, 2226.26]\n    ];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      toolbox: {\n        top: 0,\n        feature: {\n          dataZoom: {\n            yAxisIndex: false\n          },\n          restore: { show: true }\n        },\n        iconStyle: {\n          borderColor: utils.getGrays()['700'],\n          borderWidth: 1\n        },\n\n        emphasis: {\n          iconStyle: {\n            textFill: utils.getGrays()['600']\n          }\n        }\n      },\n      dataZoom: [\n        {\n          type: 'inside',\n          start: 0,\n          end: 100,\n          minValueSpan: 10\n        }\n      ],\n      xAxis: {\n        type: 'category',\n        data: data.map(item => item[0]),\n        scale: true,\n        splitLine: { show: false },\n        splitNumber: 10,\n        min: 'dataMin',\n        max: 'dataMax',\n        boundaryGap: true,\n        axisPointer: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'dashed'\n          }\n        },\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['600'],\n          formatter: value => window.dayjs(value, 'YYYY-MM-DD').format('MMM DD'),\n          margin: 15,\n          fontWeight: 500\n        }\n      },\n      yAxis: {\n        scale: true,\n        axisPointer: { show: false },\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200'],\n            type: 'dashed'\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['600'],\n          margin: 15,\n          fontWeight: 500\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      series: [\n        {\n          type: 'candlestick',\n          name: 'Volume',\n          data: data.map(item => item.slice(1)),\n          itemStyle: {\n            color: utils.getColor('warning'),\n            color0: utils.getColor('primary'),\n            borderColor: utils.getColor('warning'),\n            borderColor0: utils.getColor('primary')\n          }\n        }\n      ],\n      grid: {\n        right: 5,\n        left: 5,\n        bottom: 5,\n        top: '15%',\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBasicCandlestickChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Basic Gauge Chart                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBasicGaugeChartInit = () => {\n  const $basicGaugeChartEl = document.querySelector('.echart-basic-gauge-chart-example');\n\n  if ($basicGaugeChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($basicGaugeChartEl, 'options');\n    const chart = window.echarts.init($basicGaugeChartEl);\n\n    const tooltipFormatter = params => {\n      return `\n      <div>\n          <h6 class=\"fs--1 text-700 mb-0\">\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\n            ${params[0].name} : ${params[0].value}\n          </h6>\n      </div>\n      `;\n    };\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      radius: '100%',\n      series: [\n        {\n          name: 'Pressure',\n          type: 'gauge',\n          splitLine: {\n            lineStyle: {\n              color: utils.getGrays()['600']\n            }\n          },\n          axisLabel: {\n            color: utils.getGrays()['600']\n          },\n          detail: {\n            formatter: '{value}'\n          },\n          title: {\n            color: utils.getGrays()['600']\n          },\n          data: [\n            {\n              value: 50,\n              name: 'SCORE',\n              detail: {\n                color: utils.getGrays()['600']\n              }\n            }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBasicGaugeChartInit;\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Line Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineChartInit = () => {\n  const $lineChartEl = document.querySelector('.echart-line-chart-example');\n\n  if ($lineChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineChartEl, 'options');\n    const chart = window.echarts.init($lineChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    const data = [1272, 1301, 1402, 1216, 1086, 1236, 1219, 1330, 1367, 1416, 1297, 1204];\n\n    const tooltipFormatter = params => {\n      return `\n      <div>\n          <h6 class=\"fs--1 text-700 mb-0\">\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].borderColor}'></span>\n            ${params[0].name} : ${params[0].value}\n          </h6>\n      </div>\n      `;\n    };\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        },\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: months,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          formatter: value => value.substring(0, 3),\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            type: 'dashed',\n            color: utils.getGrays()['200']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false },\n        min: 600\n      },\n      series: [\n        {\n          type: 'line',\n          data,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          showSymbol: false,\n          symbol: 'circle',\n          symbolSize: 10,\n          smooth: false,\n          hoverAnimation: true\n        }\n      ],\n      grid: { right: '3%', left: '10%', bottom: '10%', top: '5%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsLineChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                           Echarts Bubble Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBubbleChartInit = () => {\n  const $bubbleChartEl = document.querySelector('.echart-bubble-chart-example');\n\n  if ($bubbleChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($bubbleChartEl, 'options');\n    const chart = window.echarts.init($bubbleChartEl);\n\n    let data = [\n      [\n        [28604, 77, 17096869, 'Australia', 1990],\n        [31163, 77.4, 27662440, 'Canada', 1990],\n        [1516, 68, 1154605773, 'China', 1990],\n        [28599, 75, 4986705, 'Finland', 1990],\n        [29476, 77.1, 56943299, 'France', 1990],\n        [31476, 75.4, 78958237, 'Germany', 1990],\n        [1777, 57.7, 870601776, 'India', 1990],\n        [29550, 79.1, 122249285, 'Japan', 1990],\n        [12087, 72, 42972254, 'South Korea', 1990],\n        [24021, 75.4, 3397534, 'New Zealand', 1990],\n        [43296, 76.8, 4240375, 'Norway', 1990],\n        [10088, 70.8, 38195258, 'Poland', 1990],\n        [19349, 69.6, 147568552, 'Russia', 1990],\n        [26424, 75.7, 57110117, 'United Kingdom', 1990],\n        [37062, 75.4, 252847810, 'United States', 1990]\n      ],\n      [\n        [44056, 81.8, 23968973, 'Australia', 2015],\n        [43294, 81.7, 35939927, 'Canada', 2015],\n        [13334, 76.9, 1376048943, 'China', 2015],\n        [38923, 80.8, 5503457, 'Finland', 2015],\n        [37599, 81.9, 64395345, 'France', 2015],\n        [44053, 81.1, 80688545, 'Germany', 2015],\n        [5903, 66.8, 1311050527, 'India', 2015],\n        [36162, 83.5, 126573481, 'Japan', 2015],\n        [34644, 80.7, 50293439, 'South Korea', 2015],\n        [34186, 80.6, 4528526, 'New Zealand', 2015],\n        [64304, 81.6, 5210967, 'Norway', 2015],\n        [24787, 77.3, 38611794, 'Poland', 2015],\n        [23038, 73.13, 143456918, 'Russia', 2015],\n        [38225, 81.4, 64715810, 'United Kingdom', 2015],\n        [53354, 79.1, 321773631, 'United States', 2015]\n      ]\n    ];\n\n    const getDefaultOptions = () => ({\n      title: {\n        text: '1990 and 2015 have per capita and GDP',\n        left: 0,\n        top: 0,\n        textStyle: {\n          color: utils.getGrays()['600'],\n          fontWeight: 600\n        }\n      },\n      legend: {\n        right: 0,\n        top: '10%',\n        data: ['1990', '2015'],\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      xAxis: {\n        axisLabel: {\n          color: utils.getGrays()['600'],\n          formatter: value => `${value / 1000}k`\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      yAxis: {\n        scale: true,\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        }\n      },\n      series: [\n        {\n          name: '1990',\n          data: data[0],\n          type: 'scatter',\n          symbolSize: function (value) {\n            return Math.sqrt(value[2]) / 5e2;\n          },\n          emphasis: {\n            focus: 'series',\n            label: {\n              color: utils.getGrays()['600'],\n              show: true,\n              formatter: function (param) {\n                return param.data[3];\n              },\n              position: 'top'\n            }\n          },\n          itemStyle: {\n            color: utils.rgbaColor(utils.getColor('primary'), 0.7)\n          }\n        },\n        {\n          name: '2015',\n          data: data[1],\n          type: 'scatter',\n          symbolSize: function (value) {\n            return Math.sqrt(value[2]) / 7e2;\n          },\n          emphasis: {\n            focus: 'series',\n            label: {\n              color: utils.getGrays()['600'],\n              show: true,\n              formatter: function (param) {\n                return param.data[3];\n              },\n              position: 'top'\n            }\n          },\n          itemStyle: {\n            color: utils.rgbaColor(utils.getColor('warning'), 0.7)\n          }\n        }\n      ],\n      grid: {\n        left: 5,\n        right: 10,\n        bottom: 5,\n        top: '20%',\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBubbleChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsCandlestickMixedChartInit = () => {\n  const $candleStickMixedChartEl = document.querySelector(\n    '.echart-candlestick-mixed-chart-example'\n  );\n\n  if ($candleStickMixedChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($candleStickMixedChartEl, 'options');\n    const chart = window.echarts.init($candleStickMixedChartEl);\n\n    var colorList = [\n      utils.getColor('primary'),\n      utils.getColor('info'),\n      utils.getColor('dark'),\n      utils.getColor('warning')\n    ];\n\n    /* eslint-disable no-continue */\n    const calculateMA = (dayCount, data) => {\n      var result = [];\n      for (var i = 0, len = data.length; i < len; i += 1) {\n        if (i < dayCount) {\n          result.push('-');\n          continue;\n        }\n        var sum = 0;\n        for (var j = 0; j < dayCount; j += 1) {\n          sum += data[i - j][1];\n        }\n        result.push((sum / dayCount).toFixed(2));\n      }\n      return result;\n    };\n\n    const dates = utils.getPastDates(61).map(date => window.dayjs(date).format('MMM DD, YYYY'));\n\n    const data = [\n      [17512.58, 17633.11, 17434.27, 17642.81, 86160000],\n      [17652.36, 17716.66, 17652.36, 17790.11, 79330000],\n      [17716.05, 17685.09, 17669.72, 17755.7, 102600000],\n      [17661.74, 17792.75, 17568.02, 17811.48, 104890000],\n      [17799.39, 17737, 17710.67, 17806.38, 85230000],\n      [17718.03, 17603.32, 17579.56, 17718.03, 115230000],\n      [17605.45, 17716.05, 17542.54, 17723.55, 99410000],\n      [17687.28, 17541.96, 17484.23, 17687.28, 90120000],\n      [17555.39, 17576.96, 17528.16, 17694.51, 79990000],\n      [17586.48, 17556.41, 17555.9, 17731.63, 107100000],\n      [17571.34, 17721.25, 17553.57, 17744.43, 81020000],\n      [17741.66, 17908.28, 17741.66, 17918.35, 91710000],\n      [17912.25, 17926.43, 17885.44, 17962.14, 84510000],\n      [17925.95, 17897.46, 17867.41, 17937.65, 118160000],\n      [17890.2, 18004.16, 17848.22, 18009.53, 89390000],\n      [18012.1, 18053.6, 17984.43, 18103.46, 89820000],\n      [18059.49, 18096.27, 18031.21, 18167.63, 100210000],\n      [18092.84, 17982.52, 17963.89, 18107.29, 102720000],\n      [17985.05, 18003.75, 17909.89, 18026.85, 134120000],\n      [17990.94, 17977.24, 17855.55, 17990.94, 83770000],\n      [17987.38, 17990.32, 17934.17, 18043.77, 92570000],\n      [17996.14, 18041.55, 17920.26, 18084.66, 109090000],\n      [18023.88, 17830.76, 17796.55, 18035.73, 100920000],\n      [17813.09, 17773.64, 17651.98, 17814.83, 136670000],\n      [17783.78, 17891.16, 17773.71, 17912.35, 80100000],\n      [17870.75, 17750.91, 17670.88, 17870.75, 97060000],\n      [17735.02, 17651.26, 17609.01, 17738.06, 95020000],\n      [17664.48, 17660.71, 17615.82, 17736.11, 81530000],\n      [17650.3, 17740.63, 17580.38, 17744.54, 80020000],\n      [17743.85, 17705.91, 17668.38, 17783.16, 85590000],\n      [17726.66, 17928.35, 17726.66, 17934.61, 75790000],\n      [17919.03, 17711.12, 17711.05, 17919.03, 87390000],\n      [17711.12, 17720.5, 17625.38, 17798.19, 88560000],\n      [17711.12, 17535.32, 17512.48, 17734.74, 86640000],\n      [17531.76, 17710.71, 17531.76, 17755.8, 88440000],\n      [17701.46, 17529.98, 17469.92, 17701.46, 103260000],\n      [17501.28, 17526.62, 17418.21, 17636.22, 79120000],\n      [17514.16, 17435.4, 17331.07, 17514.16, 95530000],\n      [17437.32, 17500.94, 17437.32, 17571.75, 111990000],\n      [17507.04, 17492.93, 17480.05, 17550.7, 87790000],\n      [17525.19, 17706.05, 17525.19, 17742.59, 86480000],\n      [17735.09, 17851.51, 17735.09, 17891.71, 79180000],\n      [17859.52, 17828.29, 17803.82, 17888.66, 68940000],\n      [17826.85, 17873.22, 17824.73, 17873.22, 73190000],\n      [17891.5, 17787.2, 17724.03, 17899.24, 147390000],\n      [17754.55, 17789.67, 17664.79, 17809.18, 78530000],\n      [17789.05, 17838.56, 17703.55, 17838.56, 75560000],\n      [17799.8, 17807.06, 17689.68, 17833.17, 82270000],\n      [17825.69, 17920.33, 17822.81, 17949.68, 71870000],\n      [17936.22, 17938.28, 17936.22, 18003.23, 78750000],\n      [17931.91, 18005.05, 17931.91, 18016, 71260000],\n      [17969.98, 17985.19, 17915.88, 18005.22, 69690000],\n      [17938.82, 17865.34, 17812.34, 17938.82, 90540000],\n      [17830.5, 17732.48, 17731.35, 17893.28, 101690000],\n      [17710.77, 17674.82, 17595.79, 17733.92, 93740000],\n      [17703.65, 17640.17, 17629.01, 17762.96, 94130000],\n      [17602.23, 17733.1, 17471.29, 17754.91, 91950000],\n      [17733.44, 17675.16, 17602.78, 17733.44, 248680000],\n      [17736.87, 17804.87, 17736.87, 17946.36, 99380000],\n      [17827.33, 17829.73, 17799.8, 17877.84, 85130000],\n      [17832.67, 17780.83, 17770.36, 17920.16, 89440000]\n    ];\n\n    const dataMA5 = calculateMA(5, data);\n\n    const getDefaultOptions = () => ({\n      animation: false,\n      color: colorList,\n      legend: {\n        top: 0,\n        data: ['MA1', 'MA5', 'Volume'],\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        position: function (pos, params, el, elRect, size) {\n          var obj = {\n            top: 60\n          };\n          obj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 5;\n          return obj;\n        }\n      },\n      axisPointer: {\n        link: [\n          {\n            xAxisIndex: [0, 1]\n          }\n        ]\n      },\n      dataZoom: [\n        {\n          type: 'slider',\n          xAxisIndex: [0, 1],\n          realtime: false,\n          start: 20,\n          end: 70,\n          top: 35,\n          height: 15,\n          handleIcon:\n            'path://M10.7,11.9H9.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',\n          handleSize: '120%'\n        },\n        {\n          type: 'inside',\n          xAxisIndex: [0, 1],\n          start: 40,\n          end: 70,\n          top: 30,\n          height: 20\n        }\n      ],\n      xAxis: [\n        {\n          type: 'category',\n          data: dates,\n          boundaryGap: false,\n          axisLine: {\n            lineStyle: { color: utils.getGrays()['300'] }\n          },\n          axisLabel: {\n            color: utils.getGrays()['600'],\n            formatter: value => window.dayjs(value).format('MMM DD')\n          },\n          min: 'dataMin',\n          max: 'dataMax',\n          axisPointer: {\n            show: true\n          }\n        },\n        {\n          type: 'category',\n          gridIndex: 1,\n          data: dates,\n          scale: true,\n          boundaryGap: false,\n          splitLine: { show: false },\n          axisLabel: { show: false },\n          axisTick: { show: false },\n          axisLine: { lineStyle: { color: 'blue' } },\n          splitNumber: 20,\n          min: 'dataMin',\n          max: 'dataMax',\n          axisPointer: {\n            type: 'shadow',\n            label: { show: false },\n            triggerTooltip: true\n          }\n        }\n      ],\n      yAxis: [\n        {\n          scale: true,\n          splitNumber: 2,\n          axisLine: { show: false },\n          splitLine: {\n            lineStyle: {\n              color: utils.getGrays()['200']\n            }\n          },\n          axisTick: { show: false },\n          axisLabel: {\n            color: utils.getGrays()['600']\n          }\n        },\n        {\n          scale: true,\n          gridIndex: 1,\n          splitNumber: 2,\n          axisLabel: { show: false },\n          axisLine: { show: false },\n          axisTick: { show: false },\n          splitLine: { show: false }\n        }\n      ],\n      grid: [\n        {\n          left: 5,\n          right: 12,\n          // top: 110,\n          bottom: 60,\n          height: 160,\n          containLabel: true\n        },\n        {\n          left: 50,\n          right: 12,\n          height: 40,\n          top: 260,\n          containLabel: true\n        }\n      ],\n      series: [\n        {\n          name: 'Volume',\n          type: 'bar',\n          xAxisIndex: 1,\n          yAxisIndex: 1,\n          itemStyle: {\n            color: utils.getColor('primary')\n          },\n          emphasis: {\n            itemStyle: {\n              color: utils.getColor('primary')\n            }\n          },\n          data: data.map(item => item[4])\n        },\n        {\n          type: 'candlestick',\n          name: 'MA1',\n          data: data,\n          itemStyle: {\n            color: utils.getColor('success'),\n            color0: utils.getColor('info'),\n            borderColor: utils.getColor('success'),\n            borderColor0: utils.getColor('info')\n          }\n        },\n        {\n          name: 'MA5',\n          type: 'line',\n          data: dataMA5,\n          smooth: true,\n          showSymbol: false,\n          lineStyle: {\n            width: 1,\n            color: utils.getColor('primary')\n          }\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsCandlestickMixedChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Doughnut Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsDoughnutChartInit = () => {\n  const $doughnutChartEl = document.querySelector('.echart-doughnut-chart-example');\n\n  if ($doughnutChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($doughnutChartEl, 'options');\n    const chart = window.echarts.init($doughnutChartEl);\n\n    const getDefaultOptions = () => ({\n      legend: {\n        left: 'left',\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      series: [\n        {\n          type: 'pie',\n          radius: ['40%', '70%'],\n          center: ['50%', '55%'],\n          avoidLabelOverlap: false,\n          label: {\n            show: false,\n            position: 'center'\n          },\n          labelLine: {\n            show: false\n          },\n          data: [\n            {\n              value: 1048,\n              name: 'Facebook',\n              itemStyle: {\n                color: utils.getColor('primary')\n              }\n            },\n            {\n              value: 735,\n              name: 'Youtube',\n              itemStyle: {\n                color: utils.getColor('danger')\n              }\n            },\n            {\n              value: 580,\n              name: 'Twitter',\n              itemStyle: {\n                color: utils.getColor('info')\n              }\n            },\n            {\n              value: 484,\n              name: 'Linkedin',\n              itemStyle: {\n                color: utils.getColor('success')\n              }\n            },\n            {\n              value: 300,\n              name: 'Github',\n              itemStyle: {\n                color: utils.getColor('warning')\n              }\n            }\n          ]\n        }\n      ],\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsDoughnutChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Doughnut Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsDoughnutRoundedChartInit = () => {\n  const $doughnutRoundedChartEl = document.querySelector('.echart-doughnut-rounded-chart');\n\n  if ($doughnutRoundedChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($doughnutRoundedChartEl, 'options');\n    const chart = window.echarts.init($doughnutRoundedChartEl);\n\n    const getDefaultOptions = () => ({\n      legend: {\n        orient: 'vertical',\n        left: 'left',\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      series: [\n        {\n          type: 'pie',\n          radius: ['40%', '70%'],\n          center: window.innerWidth < 530 ? ['65%', '55%'] : ['50%', '55%'],\n          avoidLabelOverlap: false,\n          itemStyle: {\n            borderRadius: 10,\n            borderColor: utils.getGrays()['100'],\n            borderWidth: 2\n          },\n          label: {\n            show: false,\n            position: 'center'\n          },\n          labelLine: {\n            show: false\n          },\n          data: [\n            {\n              value: 1048,\n              name: 'Starter',\n              itemStyle: {\n                color: utils.getColor('primary')\n              }\n            },\n            {\n              value: 735,\n              name: 'Basic',\n              itemStyle: {\n                color: utils.getColor('danger')\n              }\n            },\n            {\n              value: 580,\n              name: 'Optimal',\n              itemStyle: {\n                color: utils.getColor('info')\n              }\n            },\n            {\n              value: 484,\n              name: 'Business',\n              itemStyle: {\n                color: utils.getColor('success')\n              }\n            },\n            {\n              value: 300,\n              name: 'Premium',\n              itemStyle: {\n                color: utils.getColor('warning')\n              }\n            }\n          ]\n        }\n      ],\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    utils.resize(() => {\n      if (window.innerWidth < 530) {\n        chart.setOption({\n          series: [\n            {\n              center: ['65%', '55%']\n            }\n          ]\n        });\n      } else\n        chart.setOption({\n          series: [\n            {\n              center: ['50%', '55%']\n            }\n          ]\n        });\n    });\n  }\n};\n\nexport default echartsDoughnutRoundedChartInit;\n","/* eslint-disable */\nimport utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                           Echarts Dynamic Line Chart                       */\n/* -------------------------------------------------------------------------- */\n\nconst echartsDynamicLineChartInit = () => {\n  const $dynamicLineChartEl = document.querySelector('.echart-dynamic-line-chart-example');\n\n  if ($dynamicLineChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($dynamicLineChartEl, 'options');\n    const chart = window.echarts.init($dynamicLineChartEl);\n\n    const randomData = () => {\n      now = new Date(+now + oneDay);\n      value = value + Math.random() * 21 - 10;\n      return {\n        name: now.toString(),\n        value: [[now.getFullYear(), now.getMonth() + 1, now.getDate()].join('/'), Math.round(value)]\n      };\n    };\n\n    var data = [];\n    var now = +new Date(1997, 9, 3);\n    var oneDay = 24 * 3600 * 1000;\n    var value = Math.random() * 1000;\n    for (var i = 0; i < 1000; i++) {\n      data.push(randomData());\n    }\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          animation: false\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'time',\n        splitLine: {\n          show: false\n        },\n        axisLabel: {\n          color: utils.getGrays()['500']\n        },\n\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisPointer: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        boundaryGap: [0, '100%'],\n        splitLine: {\n          show: false\n        },\n        axisLabel: {\n          color: utils.getGrays()['500']\n        }\n      },\n      series: [\n        {\n          name: 'Total',\n          type: 'line',\n          showSymbol: false,\n          hoverAnimation: false,\n          data: data,\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          symbol: 'circle',\n          symbolSize: 10\n        }\n      ],\n      grid: { right: 5, left: '7%', bottom: '10%', top: '5%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    setInterval(function () {\n      for (var i = 0; i < 5; i++) {\n        data.shift();\n        data.push(randomData());\n      }\n\n      chart.setOption({\n        series: [\n          {\n            data: data\n          }\n        ]\n      });\n    }, 1000);\n  }\n};\n\nexport default echartsDynamicLineChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                          Echarts Gauge Progress Chart                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsGaugeGradeChartInit = () => {\n  const $gaugeGradeChartEl = document.querySelector('.echart-gauge-grade-chart-example');\n\n  if ($gaugeGradeChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($gaugeGradeChartEl, 'options');\n    const chart = window.echarts.init($gaugeGradeChartEl);\n\n    const getDefaultOptions = () => ({\n      series: [\n        {\n          radius: '100%',\n          type: 'gauge',\n          center: ['50%', '70%'],\n          startAngle: 180,\n          endAngle: 0,\n          min: 0,\n          max: 1,\n          splitNumber: 8,\n          axisLine: {\n            lineStyle: {\n              width: 6,\n              color: [\n                [0.25, utils.getColor('danger')],\n                [0.5, utils.getColor('warning')],\n                [0.75, utils.getColor('info')],\n                [1, utils.getColor('success')]\n              ]\n            }\n          },\n          pointer: {\n            icon: 'path://M12.8,0.7l12,40.1H0.7L12.8,0.7z',\n            length: '12%',\n            width: 20,\n            offsetCenter: [0, '-60%'],\n            itemStyle: {\n              color: 'auto'\n            }\n          },\n          axisTick: {\n            length: 12,\n            lineStyle: {\n              color: 'auto',\n              width: 2\n            }\n          },\n          splitLine: {\n            length: 20,\n            lineStyle: {\n              color: 'auto',\n              width: 5\n            }\n          },\n          axisLabel: {\n            color: utils.getGrays()['600'],\n            distance: -60,\n            formatter: function (value) {\n              if (value === 0.875) {\n                return 'Excellent';\n              } else if (value === 0.625) {\n                return 'Good';\n              } else if (value === 0.375) {\n                return 'Well';\n              } else if (value === 0.125) {\n                return 'Bad';\n              }\n              return '';\n            }\n          },\n          title: {\n            offsetCenter: [0, '-20%'],\n            color: utils.getGrays()['600']\n          },\n          detail: {\n            offsetCenter: [0, '0%'],\n            valueAnimation: true,\n            formatter: function (value) {\n              return Math.round(value * 100);\n            },\n            color: 'auto'\n          },\n          data: [\n            {\n              value: 0.7,\n              name: 'Grade'\n            }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsGaugeGradeChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                          Echarts Gauge Progress Chart                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsGaugeMultiRingChartInit = () => {\n  const $gaugeMultiRingChartEl = document.querySelector(\n    '.echart-gauge-multi-ring-chart-example'\n  );\n\n  if ($gaugeMultiRingChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($gaugeMultiRingChartEl, 'options');\n    const chart = window.echarts.init($gaugeMultiRingChartEl);\n\n    const getDefaultOptions = () => ({\n      series: [\n        {\n          type: 'gauge',\n          startAngle: 90,\n          endAngle: -270,\n          radius: '85%',\n          pointer: {\n            show: false,\n          },\n          center: ['50%', '50%'],\n          progress: {\n            show: true,\n            overlap: false,\n            roundCap: true,\n            clip: false,\n            itemStyle: {\n              color: utils.getColor('info'),\n            },\n          },\n          axisLine: {\n            lineStyle: {\n              width: 8,\n              color: [[1, utils.getColor('gray-200')]],\n            },\n          },\n          splitLine: {\n            show: false,\n          },\n          axisTick: {\n            show: false,\n          },\n          axisLabel: {\n            show: false,\n          },\n          data: [79],\n          detail: {\n            show: false,\n          },\n          animationDuration: 2000,\n        },\n        {\n          type: 'gauge',\n          startAngle: 90,\n          endAngle: -270,\n          radius: '70%',\n          pointer: {\n            show: false,\n          },\n          center: ['50%', '50%'],\n          progress: {\n            show: true,\n            overlap: false,\n            roundCap: true,\n            clip: false,\n            itemStyle: {\n              color: utils.getColor('primary'),\n            },\n          },\n          axisLine: {\n            lineStyle: {\n              width: 8,\n              color: [[1, utils.getColor('gray-200')]],\n            },\n          },\n          splitLine: {\n            show: false,\n          },\n          axisTick: {\n            show: false,\n          },\n          axisLabel: {\n            show: false,\n          },\n          data: [85],\n          detail: {\n            show: false,\n          },\n          animationDuration: 2000,\n        },\n        {\n          type: 'gauge',\n          startAngle: 90,\n          endAngle: -270,\n          radius: '55%',\n          pointer: {\n            show: false,\n          },\n          center: ['50%', '50%'],\n          progress: {\n            show: true,\n            overlap: false,\n            roundCap: true,\n            clip: false,\n            itemStyle: {\n              color: utils.getColor('success'),\n            },\n          },\n          axisLine: {\n            lineStyle: {\n              width: 8,\n              color: [[1, utils.getColor('gray-200')]],\n            },\n          },\n          splitLine: {\n            show: false,\n          },\n          axisTick: {\n            show: false,\n          },\n          axisLabel: {\n            show: false,\n          },\n          data: [70],\n          detail: {\n            show: false,\n          },\n          animationDuration: 2000,\n        },\n      ],\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsGaugeMultiRingChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                          Echarts Gauge Progress Chart                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsGaugeMultiTitleChartInit = () => {\n  const $gaugeMultiTitleChartEl = document.querySelector('.echart-gauge-multi-title-chart-example');\n\n  if ($gaugeMultiTitleChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($gaugeMultiTitleChartEl, 'options');\n    const chart = window.echarts.init($gaugeMultiTitleChartEl);\n\n    const tooltipFormatter = params => {\n      return `\n      <div>\n          <h6 class=\"fs--1 text-700 mb-0\">\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\n            ${params[0].name} : ${params[0].value}\n          </h6>\n      </div>\n      `;\n    };\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      series: [\n        {\n          type: 'gauge',\n          radius: '100%',\n          anchor: {\n            show: true,\n            showAbove: true,\n            size: 18,\n            itemStyle: {\n              color: utils.getColor('warning')\n            }\n          },\n\n          progress: {\n            show: true,\n            overlap: true,\n            roundCap: true\n          },\n          axisLine: {\n            roundCap: true\n          },\n          axisTick: {\n            show: false\n          },\n          splitLine: {\n            lineStyle: {\n              width: 2,\n              color: utils.getGrays()['600']\n            }\n          },\n          axisLabel: {\n            distance: 25,\n            color: utils.getGrays()['600']\n          },\n          data: [\n            {\n              value: 20,\n              name: 'Perfect',\n              title: {\n                offsetCenter: ['-40%', '80%']\n              },\n              detail: {\n                offsetCenter: ['-40%', '95%']\n              },\n              itemStyle: {\n                color: utils.getColor('primary')\n              }\n            },\n            {\n              value: 40,\n              name: 'Good',\n              title: {\n                offsetCenter: ['0%', '80%']\n              },\n              detail: {\n                offsetCenter: ['0%', '95%']\n              },\n\n              itemStyle: {\n                color: utils.getColor('success')\n              }\n            },\n            {\n              value: 60,\n              name: 'Commonly',\n              title: {\n                offsetCenter: ['40%', '80%']\n              },\n              detail: {\n                offsetCenter: ['40%', '95%']\n              },\n\n              itemStyle: {\n                color: utils.getColor('warning')\n              }\n            }\n          ],\n          title: {\n            fontSize: 14,\n            color: utils.getGrays()['600']\n          },\n          detail: {\n            width: 40,\n            height: 14,\n            fontSize: 14,\n            color: '#fff',\n            backgroundColor: 'auto',\n            borderRadius: 3,\n            formatter: '{value}%'\n          }\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsGaugeMultiTitleChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                          Echarts Gauge Progress Chart                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsGaugeProgressChartInit = () => {\n  const $gaugeProgressChartEl = document.querySelector('.echart-gauge-progress-chart-example');\n\n  if ($gaugeProgressChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($gaugeProgressChartEl, 'options');\n    const chart = window.echarts.init($gaugeProgressChartEl);\n\n    const tooltipFormatter = params => {\n      return `\n      <div>\n          <h6 class=\"fs--1 text-700 mb-0\">\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\n            ${params[0].name} : ${params[0].value}\n          </h6>\n      </div>\n      `;\n    };\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      series: [\n        {\n          type: 'gauge',\n          center: ['50%', '60%'],\n          radius: '100%',\n          startAngle: 180,\n          endAngle: 0,\n          progress: {\n            show: true,\n            width: 18,\n            itemStyle: {\n              color: utils.getColor('info')\n            }\n          },\n          itemStyle: {\n            color: utils.getColor('info'),\n            shadowColor: utils.rgbaColor(utils.getColor('primary'), 0.5),\n            shadowBlur: 10,\n            shadowOffsetX: 2,\n            shadowOffsetY: 2\n          },\n          axisLine: {\n            lineStyle: {\n              width: 18\n            }\n          },\n          axisTick: {\n            show: false\n          },\n          splitLine: {\n            lineStyle: {\n              width: 2,\n              color: utils.getGrays()['600']\n            }\n          },\n          axisLabel: {\n            distance: 25,\n            color: utils.getGrays()['600']\n          },\n          anchor: {\n            show: true,\n            showAbove: true,\n            size: 25,\n            itemStyle: {\n              color: utils.getColor('info')\n            }\n          },\n          title: {\n            show: false\n          },\n          detail: {\n            valueAnimation: true,\n            fontSize: 80,\n            offsetCenter: [0, '70%']\n          },\n          data: [\n            {\n              value: 70,\n              detail: {\n                fontSize: 30,\n                color: utils.getGrays()['600'],\n                offsetCenter: [0, '40%']\n              }\n            }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsGaugeProgressChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                          Echarts Gauge Progress Chart                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsGaugeRingChartInit = () => {\n  const $gaugeRingChartEl = document.querySelector('.echart-gauge-ring-chart-example');\n\n  if ($gaugeRingChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($gaugeRingChartEl, 'options');\n    const chart = window.echarts.init($gaugeRingChartEl);\n\n    const tooltipFormatter = params => {\n      return `\n      <div>\n          <h6 class=\"fs--1 text-700 mb-0\">\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\n            ${params[0].name} : ${params[0].value}\n          </h6>\n      </div>\n      `;\n    };\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      series: [\n        {\n          type: 'gauge',\n          radius: '100%',\n          startAngle: 90,\n          endAngle: -270,\n          pointer: {\n            show: false\n          },\n          progress: {\n            show: true,\n            overlap: false,\n            roundCap: true,\n            clip: false,\n            itemStyle: {\n              borderWidth: 1,\n              borderColor: utils.getGrays()['500']\n            }\n          },\n          axisLine: {\n            lineStyle: {\n              width: 18\n            }\n          },\n          splitLine: {\n            show: false,\n            distance: 0,\n            length: 10\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            show: false,\n            distance: 50\n          },\n          data: [\n            {\n              value: 80,\n              title: {\n                offsetCenter: ['0%', '0%']\n              },\n              detail: {\n                offsetCenter: ['0%', '0%']\n              },\n              itemStyle: {\n                color: utils.getColor('primary')\n              }\n            }\n          ],\n          title: {\n            fontSize: 14\n          },\n          detail: {\n            width: 50,\n            height: 14,\n            fontSize: 20,\n            color: 'auto',\n            formatter: '{value}%'\n          }\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsGaugeRingChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                       Echarts Gradient Bar Chart                           */\n/* -------------------------------------------------------------------------- */\n\nconst echartsGradientBarChartInit = () => {\n  const $gradientBarChartEl = document.querySelector('.echart-gradient-bar-chart-example');\n\n  if ($gradientBarChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($gradientBarChartEl, 'options');\n    const chart = window.echarts.init($gradientBarChartEl);\n\n    const tooltipFormatter = params => {\n      return `<div> \n          <h6 class=\"fs--1 text-700 mb-0\">\n          <span class=\"dot me-1 fs--2  bg-primary\" ></span> ${params[0].name} : ${params[0].value} \n           </h6>\n        </div> `;\n    };\n\n    var dataAxis = [\n      'A',\n      'B',\n      'C',\n      'D',\n      'E',\n      'F',\n      'G',\n      'H',\n      'I',\n      'J',\n      'K',\n      'L',\n      'M',\n      'N',\n      'O',\n      'P',\n      'Q',\n      'R',\n      'S',\n      'T'\n    ];\n    var data = [\n      220, 182, 191, 234, 290, 330, 310, 123, 442, 321, 90, 149, 210, 122, 133, 334, 198, 123, 125,\n      220\n    ];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      title: {\n        text: 'Gradient and Clickable bar chart',\n        textStyle: {\n          color: utils.getGrays()['600']\n        },\n        left: 'center'\n      },\n      xAxis: {\n        data: dataAxis,\n        axisLabel: {\n          inside: true,\n          textStyle: {\n            color: '#fff'\n          }\n        },\n        axisTick: {\n          show: false\n        },\n        axisLine: {\n          show: false\n        },\n        z: 10\n      },\n      yAxis: {\n        axisLine: {\n          show: false\n        },\n        axisTick: {\n          show: false\n        },\n        axisLabel: {\n          textStyle: {\n            color: utils.getGrays()['600']\n          }\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getColor()['300']\n          }\n        }\n      },\n      dataZoom: [\n        {\n          type: 'inside'\n        }\n      ],\n      series: [\n        {\n          type: 'bar',\n          name: 'Total',\n          showBackground: true,\n          itemStyle: {\n            color: new window.echarts.graphic.LinearGradient(0, 0, 0, 1, [\n              { offset: 0, color: utils.getColor('info') },\n              { offset: 0.5, color: utils.getColor('primary') },\n              { offset: 1, color: utils.getColor('primary') }\n            ]),\n            barBorderRadius: [3, 3, 0, 0]\n          },\n          emphasis: {\n            itemStyle: {\n              color: new window.echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                { offset: 0, color: utils.getColor('primary') },\n                { offset: 0.7, color: utils.getColor('primary') },\n                { offset: 1, color: utils.getColor('info') }\n              ])\n            }\n          },\n          data: data\n        }\n      ],\n      grid: {\n        right: 5,\n        left: 5,\n        bottom: 5,\n        top: '10%',\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    const zoomSize = 6;\n    chart.on('click', function (params) {\n      chart.dispatchAction({\n        type: 'dataZoom',\n        startValue: dataAxis[Math.max(params.dataIndex - zoomSize / 2, 0)],\n        endValue: dataAxis[Math.min(params.dataIndex + zoomSize / 2, data.length - 1)]\n      });\n    });\n  }\n};\n\nexport default echartsGradientBarChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                                Market Share                                */\n/* -------------------------------------------------------------------------- */\n\nconst echartsHeatMapChartInit = () => {\n  const ECHART_HEATMAP_CHART = '.echart-heatmap-chart-example';\n  const $echartHeatmapChart = document.querySelector(ECHART_HEATMAP_CHART);\n  const hours = ['12a', '2a', '4a', '6a', '8a', '10a', '12p', '2p', '4p', '6p', '8p', '10p'];\n  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n  const data = [];\n  for (let i = 0; i < 7; i += 1) {\n    for (let j = 0; j < 12; j += 1) {\n      data.push([j, i, utils.getRandomNumber(5, 12)]);\n    }\n  }\n\n  if ($echartHeatmapChart) {\n    const userOptions = utils.getData($echartHeatmapChart, 'options');\n    const chart = window.echarts.init($echartHeatmapChart);\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        position: 'top',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1\n      },\n      grid: {\n        right: 5,\n        left: 5,\n        top: 5,\n        bottom: '15%',\n        containLabel: true\n      },\n      xAxis: {\n        type: 'category',\n        data: hours,\n        splitArea: {\n          show: true\n        },\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['400']\n          }\n        }\n      },\n      yAxis: {\n        type: 'category',\n        data: days,\n        axisLabel: {\n          formatter: value => value.substring(0, 3),\n          color: utils.getGrays()['600']\n        },\n        splitArea: {\n          show: true\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['400']\n          }\n        }\n      },\n      visualMap: {\n        min: 0,\n        max: 10,\n        calculable: true,\n        orient: 'horizontal',\n        left: 'center',\n        bottom: '0%',\n        textStyle: {\n          color: utils.getGrays()['600'],\n          fontWeight: 500\n        },\n        inRange: {\n          color: [\n            utils.rgbaColor(utils.getColors()['primary'], 1),\n            utils.rgbaColor(utils.getColors()['info'], 1),\n            utils.rgbaColor(utils.getColors()['success'], 1)\n            // utils.rgbaColor(utils.getColors()['warning'], 1),\n            // utils.rgbaColor(utils.getColors()['danger'], 1)\n          ]\n        }\n      },\n      series: [\n        {\n          type: 'heatmap',\n          data: data,\n          label: {\n            show: true\n          },\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowColor: utils.rgbaColor(utils.getColors()['black'], 0.5)\n            }\n          }\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsHeatMapChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                                Market Share                                */\n/* -------------------------------------------------------------------------- */\n\nconst echartsHeatMapSingleSeriesChartInit = () => {\n  const ECHART_HEATMAP_CHART = '.echart-heatmap-single-series-chart';\n  const $echartHeatmapChart = document.querySelector(ECHART_HEATMAP_CHART);\n  const hours = ['12a', '2a', '4a', '6a', '8a', '10a', '12p', '2p', '4p', '6p', '8p', '10p'];\n  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n  const data = [];\n  for (let i = 0; i < 7; i += 1) {\n    for (let j = 0; j < 12; j += 1) {\n      data.push([j, i, utils.getRandomNumber(1, 12)]);\n    }\n  }\n\n  if ($echartHeatmapChart) {\n    const userOptions = utils.getData($echartHeatmapChart, 'options');\n    const chart = window.echarts.init($echartHeatmapChart);\n\n    const getDefaultOptions = () => ({\n      gradientColor: [\n        utils.rgbaColor(utils.getColors()['info'], 1),\n        utils.rgbaColor(utils.getColors()['primary'], 1)\n      ],\n\n      tooltip: {\n        position: 'top',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1\n      },\n      grid: {\n        right: 5,\n        left: 5,\n        top: 5,\n        bottom: 5,\n        containLabel: true\n      },\n      xAxis: {\n        axisTick: { show: false },\n        type: 'category',\n        data: hours,\n        splitArea: {\n          show: true\n        },\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['400']\n          }\n        }\n      },\n      yAxis: {\n        axisTick: { show: false },\n        type: 'category',\n        data: days,\n        axisLabel: {\n          formatter: value => value.substring(0, 3),\n          color: utils.getGrays()['600']\n        },\n        splitArea: {\n          show: true\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['400']\n          }\n        }\n      },\n      visualMap: {\n        show: false,\n        min: 0,\n        max: 10,\n        calculable: true,\n        orient: 'horizontal',\n        left: 'center',\n        bottom: '0%',\n        textStyle: {\n          color: utils.getGrays()['600'],\n          fontWeight: 500\n        }\n      },\n\n      series: [\n        {\n          type: 'heatmap',\n          data: data,\n          label: {\n            show: true\n          },\n          itemStyle: {\n            borderColor: utils.getColor('white'),\n            borderWidth: 3\n          },\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowColor: utils.rgbaColor(utils.getColors()['black'], 0.5)\n            }\n          }\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsHeatMapSingleSeriesChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                       Echarts Horizontal Bar Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsHorizontalBarChartInit = () => {\n  const $horizontalBarChartEl = document.querySelector('.echart-horizontal-bar-chart-example');\n\n  if ($horizontalBarChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($horizontalBarChartEl, 'options');\n    const chart = window.echarts.init($horizontalBarChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    const data = [1272, 1301, 1402, 1216, 1086, 1236, 1219, 1330, 1367, 1416, 1297, 1204];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      xAxis: {\n        type: 'value',\n        boundaryGap: false,\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisTick: { show: true },\n        axisLabel: {\n          color: utils.getGrays()['500']\n        },\n        splitLine: {\n          show: false\n        },\n        min: 600\n      },\n      yAxis: {\n        type: 'category',\n        data: months,\n        boundaryGap: true,\n        axisLabel: {\n          formatter: value => value.substring(0, 3),\n          show: true,\n          color: utils.getGrays()['500'],\n          margin: 15\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        axisTick: { show: false },\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        }\n      },\n      series: [\n        {\n          type: 'bar',\n          name: 'Total',\n          data,\n          lineStyle: { color: utils.getColor('primary') },\n          itemStyle: {\n            color: utils.getColor('primary'),\n            barBorderRadius: [0, 3, 3, 0]\n          },\n          showSymbol: false,\n          symbol: 'circle',\n          smooth: false,\n          hoverAnimation: true\n        }\n      ],\n      grid: { right: '3%', left: '10%', bottom: '10%', top: '5%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsHorizontalBarChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Line Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineAreaChartInit = () => {\n  const $lineAreaChartEl = document.querySelector('.echart-line-area-chart-example');\n\n  if ($lineAreaChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineAreaChartEl, 'options');\n    const chart = window.echarts.init($lineAreaChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    const data = [1142, 1160, 1179, 946, 1420, 1434, 986, 1247, 1051, 1297, 927, 1282];\n\n    const tooltipFormatter = params => {\n      return `\n      <div>\n          <h6 class=\"fs--1 text-700 mb-0\">\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].borderColor}'></span>\n            ${params[0].name} : ${params[0].value}\n          </h6>\n      </div>\n      `;\n    };\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: months,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          formatter: value => value.substring(0, 3),\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false },\n        min: 600\n      },\n      series: [\n        {\n          type: 'line',\n          data,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          showSymbol: false,\n          symbolSize: 10,\n          symbol: 'circle',\n          smooth: false,\n          hoverAnimation: true,\n          areaStyle: {\n            color: {\n              type: 'linear',\n              x: 0,\n              y: 0,\n              x2: 0,\n              y2: 1,\n              colorStops: [\n                {\n                  offset: 0,\n                  color: utils.rgbaColor(utils.getColors().primary, 0.5)\n                },\n                {\n                  offset: 1,\n                  color: utils.rgbaColor(utils.getColors().primary, 0)\n                }\n              ]\n            }\n          }\n        }\n      ],\n      grid: { right: '3%', left: '10%', bottom: '10%', top: '5%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsLineAreaChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Line Gradient Chart                    */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineGradientChartInit = () => {\n  const $lineGradientChartEl = document.querySelector('.echart-line-gradient-chart-example');\n\n  if ($lineGradientChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineGradientChartEl, 'options');\n    const chart = window.echarts.init($lineGradientChartEl);\n\n    const data = [\n      ['2021-06-05', 116],\n      ['2021-06-06', 129],\n      ['2021-06-07', 135],\n      ['2021-06-08', 86],\n      ['2021-06-09', 73],\n      ['2021-06-10', 85],\n      ['2021-06-11', 73],\n      ['2021-06-12', 68],\n      ['2021-06-13', 92],\n      ['2021-06-14', 130],\n      ['2021-06-15', 245],\n      ['2021-06-16', 139],\n      ['2021-06-17', 115],\n      ['2021-06-18', 111],\n      ['2021-06-19', 309],\n      ['2021-06-20', 206],\n      ['2021-06-21', 137],\n      ['2021-06-22', 128],\n      ['2021-06-23', 85],\n      ['2021-06-24', 94],\n      ['2021-06-25', 71],\n      ['2021-06-26', 106],\n      ['2021-06-27', 84],\n      ['2021-06-28', 93],\n      ['2021-06-29', 85],\n      ['2021-06-30', 73],\n      ['2021-07-01', 83],\n      ['2021-07-02', 125],\n      ['2021-07-03', 107],\n      ['2021-07-04', 82],\n      ['2021-07-05', 44],\n      ['2021-07-06', 72],\n      ['2021-07-07', 106],\n      ['2021-07-08', 107],\n      ['2021-07-09', 66],\n      ['2021-07-10', 91],\n      ['2021-07-11', 92],\n      ['2021-07-12', 113],\n      ['2021-07-13', 107],\n      ['2021-07-14', 131],\n      ['2021-07-15', 111],\n      ['2021-07-16', 64],\n      ['2021-07-17', 69],\n      ['2021-07-18', 88],\n      ['2021-07-19', 77],\n      ['2021-07-20', 83],\n      ['2021-07-21', 111],\n      ['2021-07-22', 57],\n      ['2021-07-23', 55],\n      ['2021-07-24', 60]\n    ];\n\n    const dateList = data.map(function (item) {\n      return item[0];\n    });\n    const valueList = data.map(function (item) {\n      return item[1];\n    });\n\n    const getDefaultOptions = () => ({\n      visualMap: {\n        show: false,\n        type: 'continuous',\n        dimension: 0,\n        min: 0,\n        max: dateList.length - 1,\n        color: [utils.getColor('danger'), utils.getColor('warning')]\n      },\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'category',\n        data: dateList,\n        axisLabel: {\n          formatter: value => window.dayjs(value).format('MMM DD'),\n          color: utils.getGrays()['500'],\n          margin: 15\n        },\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisPointer: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['500'],\n          margin: 15\n        },\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200'],\n            type: 'dashed'\n          }\n        }\n      },\n      grid: { right: '3%', left: '8%', bottom: '10%', top: '5%' },\n      series: {\n        name: 'Total',\n        type: 'line',\n        showSymbol: false,\n        symbolSize: 10,\n        symbol: 'circle',\n        data: valueList,\n        itemStyle: {\n          color: utils.getGrays().white,\n          borderWidth: 2\n        }\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsLineGradientChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                           Echarts Line Log Chart                           */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineLogChartInit = () => {\n  const $lineLogChartEl = document.querySelector('.echart-line-log-chart-example');\n\n  if ($lineLogChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineLogChartEl, 'options');\n    const chart = window.echarts.init($lineLogChartEl);\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'category',\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        splitLine: { show: false },\n        data: Array.from(Array(10).keys()).map(item => item + 1)\n      },\n      yAxis: {\n        type: 'log',\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      series: [\n        {\n          name: 'Index Of 3',\n          type: 'line',\n          data: [1, 3, 9, 27, 81, 247, 741, 2223, 6669],\n          symbolSize: 7,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('danger'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('danger')\n          },\n          symbol: 'circle'\n        },\n        {\n          name: 'Index of 2',\n          type: 'line',\n          data: [1, 2, 4, 8, 16, 32, 64, 128, 256],\n          symbolSize: 7,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('success'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('success')\n          },\n          symbol: 'circle'\n        },\n        {\n          name: 'Index of 1/2',\n          type: 'line',\n          data: [1 / 2, 1 / 4, 1 / 8, 1 / 16, 1 / 32, 1 / 64, 1 / 128, 1 / 256, 1 / 512],\n          symbolSize: 7,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('info'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('info')\n          },\n          symbol: 'circle'\n        }\n      ],\n      grid: {\n        right: 10,\n        left: 5,\n        bottom: 5,\n        top: 10,\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsLineLogChartInit;\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                        Echarts Line Marker Chart                           */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineMarkerChartInit = () => {\n  const $lineMarkerChartEl = document.querySelector('.echart-line-marker-chart-example');\n\n  if ($lineMarkerChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineMarkerChartEl, 'options');\n    const chart = window.echarts.init($lineMarkerChartEl);\n\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    const getDefaultOptions = () => ({\n      color: [\n        utils.getColor('primary'),\n        utils.getColor('warning')\n        // utils.getColor('danger')\n      ],\n      legend: {\n        data: [\n          {\n            name: 'Max',\n            textStyle: {\n              color: utils.getGrays()['600']\n            }\n          },\n          {\n            name: 'Min',\n            textStyle: {\n              color: utils.getGrays()['600']\n            }\n          }\n        ]\n      },\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        },\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'category',\n        data: days,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          formatter: value => value.substring(0, 3),\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      series: [\n        {\n          name: 'Max',\n          type: 'line',\n          data: [10, 11, 13, 11, 12, 9, 12],\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          symbol: 'circle',\n          markPoint: {\n            itemStyle: {\n              color: utils.getColor('primary')\n            },\n            data: [\n              { type: 'max', name: 'Max' },\n              { type: 'min', name: 'Min' }\n            ]\n          },\n          markLine: {\n            lineStyle: {\n              color: utils.getColor('primary')\n            },\n            label: {\n              color: utils.getGrays()['600']\n            },\n            data: [{ type: 'average', name: 'average' }]\n          }\n        },\n        {\n          name: 'Min',\n          type: 'line',\n          data: [1, -2, 2, 5, 3, 2, 0],\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('danger'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('danger')\n          },\n          symbol: 'circle',\n          markPoint: {\n            itemStyle: {\n              color: utils.getColor('danger')\n            },\n            label: {\n              color: '#fff'\n            },\n            data: [{ name: 'Weekly lowest', value: -2, xAxis: 1, yAxis: -1.5 }]\n          },\n          markLine: {\n            lineStyle: {\n              color: utils.getColor('danger')\n            },\n            label: {\n              color: utils.getGrays()['600']\n            },\n            data: [\n              { type: 'average', name: 'average' },\n              [\n                {\n                  symbol: 'none',\n                  x: '90%',\n                  yAxis: 'max'\n                },\n                {\n                  symbol: 'circle',\n                  label: {\n                    position: 'start',\n                    formatter: 'Max'\n                  },\n                  type: 'max',\n                  name: 'Highest point'\n                }\n              ]\n            ]\n          }\n        }\n      ],\n      grid: { right: '8%', left: '5%', bottom: '10%', top: '15%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsLineMarkerChartInit;\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Line Race Chart                        */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineRaceChartInit = () => {\n  const $lineRaceChartEl = document.querySelector('.echart-line-race-chart-example');\n\n  if ($lineRaceChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineRaceChartEl, 'options');\n    const chart = window.echarts.init($lineRaceChartEl);\n\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    const getDefaultOptions = () => ({\n      color: [utils.getColor('primary'), utils.getColor('warning')],\n      legend: {\n        data: [\n          {\n            name: 'Max',\n            textStyle: {\n              color: utils.getGrays()['600']\n            }\n          },\n          {\n            name: 'Min',\n            textStyle: {\n              color: utils.getGrays()['600']\n            }\n          }\n        ]\n      },\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        // formatter: tooltipFormatter,\n        transitionDuration: 0,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        },\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: days,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          formatter: value => value.substring(0, 3),\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      series: [\n        {\n          name: 'Max',\n          type: 'line',\n          data: [10, 11, 13, 11, 12, 9, 12],\n          markPoint: {\n            data: [\n              { type: 'max', name: 'Max' },\n              { type: 'min', name: 'Min' }\n            ]\n          },\n          markLine: {\n            label: {\n              color: utils.getGrays()['600']\n            },\n            data: [{ type: 'average', name: 'average' }]\n          }\n        },\n        {\n          name: 'Min',\n          type: 'line',\n          data: [1, -2, 2, 5, 3, 2, 0],\n          markPoint: {\n            label: {\n              color: '#fff'\n            },\n            data: [{ name: 'Weekly lowest', value: -2, xAxis: 1, yAxis: -1.5 }]\n          },\n          markLine: {\n            label: {\n              color: utils.getGrays()['600']\n            },\n            data: [\n              { type: 'average', name: 'average' },\n              [\n                {\n                  symbol: 'none',\n                  x: '90%',\n                  yAxis: 'max'\n                },\n                {\n                  symbol: 'circle',\n                  label: {\n                    position: 'start',\n                    formatter: 'Max'\n                  },\n                  type: 'max',\n                  name: 'Highest point'\n                }\n              ]\n            ]\n          }\n        }\n      ],\n      grid: { right: '8%', left: '5%', bottom: '10%', top: '15%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsLineRaceChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                    Echarts Line Share Dataset Chart                        */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineShareDatasetChartInit = () => {\n  const $lineShareChartEl = document.querySelector('.echart-line-share-dataset-chart-example');\n\n  if ($lineShareChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineShareChartEl, 'options');\n    const chart = window.echarts.init($lineShareChartEl);\n\n    const getDefaultOptions = () => ({\n      color: [\n        utils.getColor('danger'),\n        utils.getColor('warning'),\n        utils.getColor('info'),\n        utils.getColor('primary')\n      ],\n      legend: {\n        top: 0,\n        textStyle: {\n          color: utils.getGrays()['700']\n        }\n      },\n      tooltip: {\n        trigger: 'axis',\n        showContent: false\n      },\n      dataset: {\n        source: [\n          ['product', '2012', '2013', '2014', '2015', '2016', '2017'],\n          ['Milk Tea', 56.5, 82.1, 88.7, 70.1, 53.4, 85.1],\n          ['Matcha Latte', 51.1, 51.4, 55.1, 53.3, 73.8, 68.7],\n          ['Cheese Cocoa', 40.1, 62.2, 69.5, 36.4, 45.2, 32.5],\n          ['Walnut Brownie', 25.2, 37.1, 41.2, 18, 33.9, 49.1]\n        ]\n      },\n      xAxis: {\n        type: 'category',\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        axisPointer: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        }\n      },\n      yAxis: {\n        gridIndex: 0,\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      series: [\n        {\n          type: 'line',\n          smooth: true,\n          seriesLayoutBy: 'row',\n          emphasis: { focus: 'series' },\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('danger'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('danger')\n          },\n          symbol: 'circle'\n        },\n        {\n          type: 'line',\n          smooth: true,\n          seriesLayoutBy: 'row',\n          emphasis: { focus: 'series' },\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('info'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('info')\n          },\n          symbol: 'circle'\n        },\n        {\n          type: 'line',\n          smooth: true,\n          seriesLayoutBy: 'row',\n          emphasis: { focus: 'series' },\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('warning'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('warning')\n          },\n          symbol: 'circle'\n        },\n        {\n          type: 'line',\n          smooth: true,\n          seriesLayoutBy: 'row',\n          emphasis: { focus: 'series' },\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          symbol: 'circle'\n        },\n        {\n          type: 'pie',\n          id: 'pie',\n          radius: '30%',\n          center: ['50%', '28%'],\n          emphasis: { focus: 'data' },\n          label: {\n            formatter: '{b}: {@2012} ({d}%)',\n            color: utils.getGrays()['600']\n          },\n          encode: {\n            itemName: 'product',\n            value: '2012',\n            tooltip: '2012'\n          }\n        }\n      ],\n      grid: {\n        right: 10,\n        left: 5,\n        bottom: 5,\n        top: '55%',\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    chart.on('updateAxisPointer', function (event) {\n      var xAxisInfo = event.axesInfo[0];\n      if (xAxisInfo) {\n        var dimension = xAxisInfo.value + 1;\n        chart.setOption({\n          series: {\n            id: 'pie',\n            label: {\n              formatter: '{b}: {@[' + dimension + ']} ({d}%)'\n            },\n            encode: {\n              value: dimension,\n              tooltip: dimension\n            }\n          }\n        });\n      }\n    });\n  }\n};\n\nexport default echartsLineShareDatasetChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                                Session By Country Map                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsUsaMapInit = () => {\n  const $usaMapEl = document.querySelector('.echart-map-usa-example');\n\n  const data = [\n    { name: 'Alabama', value: 4822023 },\n    { name: 'Alaska', value: 731449 },\n    { name: 'Arizona', value: 6553255 },\n    { name: 'Arkansas', value: 2949131 },\n    { name: 'California', value: 38041430 },\n    { name: 'Colorado', value: 5187582 },\n    { name: 'Connecticut', value: 3590347 },\n    { name: 'Delaware', value: 917092 },\n    { name: 'District of Columbia', value: 632323 },\n    { name: 'Florida', value: 19317568 },\n    { name: 'Georgia', value: 9919945 },\n    { name: 'Hawaii', value: 1392313 },\n    { name: 'Idaho', value: 1595728 },\n    { name: 'Illinois', value: 12875255 },\n    { name: 'Indiana', value: 6537334 },\n    { name: 'Iowa', value: 3074186 },\n    { name: 'Kansas', value: 2885905 },\n    { name: 'Kentucky', value: 4380415 },\n    { name: 'Louisiana', value: 4601893 },\n    { name: 'Maine', value: 1329192 },\n    { name: 'Maryland', value: 5884563 },\n    { name: 'Massachusetts', value: 6646144 },\n    { name: 'Michigan', value: 9883360 },\n    { name: 'Minnesota', value: 5379139 },\n    { name: 'Mississippi', value: 2984926 },\n    { name: 'Missouri', value: 6021988 },\n    { name: 'Montana', value: 1005141 },\n    { name: 'Nebraska', value: 1855525 },\n    { name: 'Nevada', value: 2758931 },\n    { name: 'New Hampshire', value: 1320718 },\n    { name: 'New Jersey', value: 8864590 },\n    { name: 'New Mexico', value: 2085538 },\n    { name: 'New York', value: 19570261 },\n    { name: 'North Carolina', value: 9752073 },\n    { name: 'North Dakota', value: 699628 },\n    { name: 'Ohio', value: 11544225 },\n    { name: 'Oklahoma', value: 3814820 },\n    { name: 'Oregon', value: 3899353 },\n    { name: 'Pennsylvania', value: 12763536 },\n    { name: 'Rhode Island', value: 1050292 },\n    { name: 'South Carolina', value: 4723723 },\n    { name: 'South Dakota', value: 833354 },\n    { name: 'Tennessee', value: 6456243 },\n    { name: 'Texas', value: 26059203 },\n    { name: 'Utah', value: 2855287 },\n    { name: 'Vermont', value: 626011 },\n    { name: 'Virginia', value: 8185867 },\n    { name: 'Washington', value: 6897012 },\n    { name: 'West Virginia', value: 1855413 },\n    { name: 'Wisconsin', value: 5726398 },\n    { name: 'Wyoming', value: 576412 },\n    { name: 'Puerto Rico', value: 3667084 }\n  ];\n\n  if ($usaMapEl) {\n    const userOptions = utils.getData($usaMapEl, 'options');\n    const chart = window.echarts.init($usaMapEl);\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: params => {\n          return `<strong>${params.data.name} :</strong> ${params.data.value}`;\n        }\n      },\n      toolbox: {\n        show: false,\n        feature: {\n          restore: {}\n        }\n      },\n      visualMap: {\n        left: 'right',\n        min: 500000,\n        max: 38000000,\n        inRange: {\n          color: [utils.getColor('primary'), utils.getColor('info')]\n        },\n        text: ['High', 'Low'],\n        calculable: true,\n        textStyle: {\n          color: utils.getGrays()['600']\n        },\n        formatter: value => `${value / 1000}k`\n      },\n      series: [\n        {\n          left: 10,\n          name: 'USA PopEstimates',\n          type: 'map',\n          zoom: 1.2,\n          roam: true,\n          scaleLimit: {\n            min: 1,\n            max: 5\n          },\n          itemStyle: {\n            borderColor: utils.getGrays()['300']\n          },\n          label: {\n            color: '#fff'\n          },\n          map: 'USA',\n          emphasis: {\n            label: {\n              show: true,\n              color: '#fff'\n            },\n\n            itemStyle: {\n              areaColor: utils.getColor('warning')\n            }\n          },\n          data\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n    document.querySelector('.usa-map-reset').addEventListener('click', () => {\n      chart.dispatchAction({\n        type: 'restore'\n      });\n    });\n  }\n};\n\nexport default echartsUsaMapInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                            Bandwidth Saved                                 */\n/* -------------------------------------------------------------------------- */\n\nconst echartsNestedPiesChartInit = () => {\n  const $echartsNestedPies = document.querySelector(\n    '.echarts-nested-pies-chart-example'\n  );\n\n  if ($echartsNestedPies) {\n    const userOptions = utils.getData($echartsNestedPies, 'options');\n    const chart = window.echarts.init($echartsNestedPies);\n\n    const marketingExpenses = [\n      {\n        value: 412600,\n        name: 'Offline Marketing',\n        itemStyle: { color: utils.getColor('primary') },\n        label: {\n          rich: {\n            per: {\n              color: '#1C4F93',\n            },\n          },\n        },\n      },\n      {\n        value: 641500,\n        name: 'Digital Marketing',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('info'), 0.35),\n        },\n        label: {\n          rich: {\n            per: {\n              color: '#1978A2',\n            },\n          },\n        },\n      },\n    ];\n\n    const detailedExpenses = [\n      {\n        value: 91600,\n        name: 'Event Sponsorship',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('primary'), 0.4),\n        },\n      },\n      {\n        value: 183000,\n        name: 'Outrich Event',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('primary'), 0.6),\n        },\n      },\n      {\n        value: 138000,\n        name: 'Ad Campaign',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('primary'), 0.8),\n        },\n      },\n      {\n        value: 183000,\n        name: 'Social Media',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('info'), 0.2),\n        },\n      },\n      {\n        value: 45900,\n        name: 'Google Ads',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('info'), 0.35),\n        },\n      },\n      {\n        value: 138000,\n        name: 'Influencer Marketing',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('info'), 0.5),\n        },\n      },\n      {\n        value: 183000,\n        name: 'Email Marketing',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('info'), 0.7),\n        },\n      },\n      {\n        value: 91600,\n        name: 'Generate Backlinks',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('info'), 0.8),\n        },\n      },\n    ];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'item',\n        backgroundColor: utils.getGrays()['100'],\n        textStyle: { color: utils.getColors().dark },\n        formatter: '{b}<br/> {c} ({d}%)',\n      },\n      series: [\n        {\n          name: 'Marketing Expenses',\n          type: 'pie',\n          selectedMode: 'single',\n          radius: ['45%', '60%'],\n          label: {\n            show: false,\n          },\n          labelLine: {\n            show: false,\n          },\n          itemStyle: {\n            borderColor: utils.getColor('gray-100'),\n            borderWidth: 2,\n          },\n\n          data: detailedExpenses,\n        },\n        {\n          name: 'Marketing Expenses',\n          type: 'pie',\n          radius: ['70%', '75%'],\n          barWidth: 10,\n          labelLine: {\n            length: 0,\n            show: false,\n          },\n          label: {\n            formatter: '{per|{d}%}',\n            rich: {\n              per: {\n                fontSize: 14,\n                fontWeight: 'bold',\n                lineHeight: 33,\n              },\n            },\n          },\n          data: marketingExpenses,\n        },\n      ],\n    });\n\n    const initChart = () => {\n      if (utils.isScrolledIntoView($echartsNestedPies)) {\n        echartSetOption(chart, userOptions, getDefaultOptions);\n        window.removeEventListener('scroll', initChart);\n      }\n    };\n\n    window.addEventListener('scroll', initChart);\n  }\n};\n\nexport default echartsNestedPiesChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Pie Chart                              */\n/* -------------------------------------------------------------------------- */\n\nconst echartsPieChartInit = () => {\n  const $pieChartEl = document.querySelector('.echart-pie-chart-example');\n\n  if ($pieChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($pieChartEl, 'options');\n    const chart = window.echarts.init($pieChartEl);\n\n    const getDefaultOptions = () => ({\n      legend: {\n        left: 'left',\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      series: [\n        {\n          type: 'pie',\n          radius: window.innerWidth < 530 ? '45%' : '60%',\n          label: {\n            color: utils.getGrays()['700']\n          },\n          center: ['50%', '55%'],\n          data: [\n            {\n              value: 1048,\n              name: 'Facebook',\n              itemStyle: {\n                color: utils.getColor('primary')\n              }\n            },\n            {\n              value: 735,\n              name: 'Youtube',\n              itemStyle: {\n                color: utils.getColor('danger')\n              }\n            },\n            {\n              value: 580,\n              name: 'Twitter',\n              itemStyle: {\n                color: utils.getColor('info')\n              }\n            },\n            {\n              value: 484,\n              name: 'Linkedin',\n              itemStyle: {\n                color: utils.getColor('success')\n              }\n            },\n            {\n              value: 300,\n              name: 'Github',\n              itemStyle: {\n                color: utils.getColor('warning')\n              }\n            }\n          ],\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: utils.rgbaColor(utils.getGrays()['600'], 0.5)\n            }\n          }\n        }\n      ],\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    //- set chart radius on window resize\n    utils.resize(() => {\n      if (window.innerWidth < 530) {\n        chart.setOption({\n          series: [\n            {\n              radius: '45%'\n            }\n          ]\n        });\n      } else\n        chart.setOption({\n          series: [\n            {\n              radius: '60%'\n            }\n          ]\n        });\n    });\n  }\n};\n\nexport default echartsPieChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Doughnut Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsPieEdgeAlignChartInit = () => {\n  const $echartPieAEdgeAlignChartEl = document.querySelector('.echart-pie-edge-align-chart');\n\n  const data = [\n    {\n      value: 800,\n      name: 'Starter',\n      itemStyle: {\n        color: utils.rgbaColor(utils.getColors()['primary'], 0.5)\n      }\n    },\n    {\n      value: 1048,\n      name: 'Starter Pro',\n      itemStyle: {\n        color: utils.getColor('danger')\n      }\n    },\n    {\n      value: 735,\n      name: 'Basic',\n      itemStyle: {\n        color: utils.getColor('primary')\n      }\n    },\n    {\n      value: 580,\n      name: 'Optimal',\n      itemStyle: {\n        color: utils.getColor('secondary')\n      }\n    },\n    {\n      value: 484,\n      name: 'Business',\n      itemStyle: {\n        color: utils.getColor('warning')\n      }\n    },\n    {\n      value: 600,\n      name: 'Classic addition',\n      itemStyle: {\n        color: utils.rgbaColor(utils.getColors()['warning'], 0.8)\n      }\n    },\n    {\n      value: 300,\n      name: 'Premium',\n      itemStyle: {\n        color: utils.getColor('success')\n      }\n    },\n    {\n      value: 300,\n      name: 'Platinum',\n      itemStyle: {\n        color: utils.getColor('info')\n      }\n    },\n    {\n      value: 400,\n      name: 'Platinum Pro',\n      itemStyle: {\n        color: utils.rgbaColor(utils.getColors()['primary'], 0.5)\n      }\n    }\n  ];\n\n  if ($echartPieAEdgeAlignChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($echartPieAEdgeAlignChartEl, 'options');\n    const chart = window.echarts.init($echartPieAEdgeAlignChartEl);\n\n    const getDefaultOptions = () => ({\n      title: [\n        {\n          text: 'Pie Edge Align Chart',\n          left: 'center',\n          textStyle: {\n            color: utils.getGrays()['600']\n          }\n        },\n        {\n          subtext: 'alignTo: \"edge\"',\n          left: '50%',\n          top: '85%',\n          textAlign: 'center',\n          subtextStyle: {\n            color: utils.getGrays()['700']\n          }\n        }\n      ],\n\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n\n      series: [\n        {\n          type: 'pie',\n          radius: window.innerWidth < 530 ? '45%' : '60%',\n          center: ['50%', '50%'],\n          data: data,\n          label: {\n            position: 'outer',\n            alignTo: 'edge',\n            margin: 20,\n            color: utils.getGrays()['700']\n          },\n          left: '5%',\n          right: '5%',\n          top: 0,\n          bottom: 0\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    //- set chart radius on window resize\n    utils.resize(() => {\n      if (window.innerWidth < 530) {\n        chart.setOption({\n          series: [{ radius: '45%' }]\n        });\n      } else\n        chart.setOption({\n          series: [{ radius: '60%' }]\n        });\n    });\n  }\n};\n\nexport default echartsPieEdgeAlignChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Doughnut Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsPieLabelAlignChartInit = () => {\n  const $echartPieLabelAlignChartEl = document.querySelector('.echart-pie-label-align-chart');\n\n  if ($echartPieLabelAlignChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($echartPieLabelAlignChartEl, 'options');\n    const chart = window.echarts.init($echartPieLabelAlignChartEl);\n\n    const data = [\n      {\n        value: 800,\n        name: 'Starter',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColors()['primary'], 0.5)\n        }\n      },\n      {\n        value: 1048,\n        name: 'Starter Pro',\n        itemStyle: {\n          color: utils.getColor('danger')\n        }\n      },\n      {\n        value: 735,\n        name: 'Basic',\n        itemStyle: {\n          color: utils.getColor('primary')\n        }\n      },\n      {\n        value: 580,\n        name: 'Optimal',\n        itemStyle: {\n          color: utils.getColor('secondary')\n        }\n      },\n      {\n        value: 484,\n        name: 'Business',\n        itemStyle: {\n          color: utils.getColor('warning')\n        }\n      },\n      {\n        value: 600,\n        name: 'Classic addition',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColors()['warning'], 0.8)\n        }\n      },\n      {\n        value: 300,\n        name: 'Premium',\n        itemStyle: {\n          color: utils.getColor('success')\n        }\n      },\n      {\n        value: 300,\n        name: 'Platinum',\n        itemStyle: {\n          color: utils.getColor('info')\n        }\n      },\n      {\n        value: 400,\n        name: 'Platinum Pro',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColors()['primary'], 0.5)\n        }\n      }\n    ];\n\n    const getDefaultOptions = () => ({\n      title: [\n        {\n          text: 'Pie Label Align Chart',\n          left: 'center',\n          textStyle: {\n            color: utils.getGrays()['600']\n          }\n        },\n        {\n          subtext: 'alignTo: \"labelLine\"',\n          left: '50%',\n          top: '85%',\n          textAlign: 'center',\n          subtextStyle: {\n            color: utils.getGrays()['700']\n          }\n        }\n      ],\n\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n\n      series: [\n        {\n          type: 'pie',\n          radius: window.innerWidth < 530 ? '45%' : '60%',\n          center: ['50%', '50%'],\n          data: data,\n          label: {\n            position: 'outer',\n            alignTo: 'labelLine',\n            bleedMargin: 5,\n            color: utils.getGrays()['700']\n          },\n          left: '5%',\n          right: '5%',\n          top: 0,\n          bottom: 0\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    //- set chart radius on window resize\n    utils.resize(() => {\n      if (window.innerWidth < 530) {\n        chart.setOption({\n          series: [{ radius: '45%' }]\n        });\n      } else\n        chart.setOption({\n          series: [{ radius: '60%' }]\n        });\n    });\n  }\n};\n\nexport default echartsPieLabelAlignChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Doughnut Chart                         */\n/* -------------------------------------------------------------------------- */\nconst data1 = [\n  {\n    value: 1048,\n    name: 'Starter',\n    itemStyle: {\n      color: utils.getColor('danger')\n    }\n  },\n  {\n    value: 735,\n    name: 'Basic',\n    itemStyle: {\n      color: utils.getColor('primary')\n    }\n  },\n  {\n    value: 580,\n    name: 'Optimal',\n    itemStyle: {\n      color: utils.getColor('secondary')\n    }\n  },\n  {\n    value: 484,\n    name: 'Business',\n    itemStyle: {\n      color: utils.getColor('warning')\n    }\n  },\n  {\n    value: 300,\n    name: 'Premium',\n    itemStyle: {\n      color: utils.getColor('success')\n    }\n  },\n  {\n    value: 300,\n    name: 'Platinum',\n    itemStyle: {\n      color: utils.getColor('info')\n    }\n  }\n];\n\nconst data2 = [\n  {\n    value: 1048,\n    name: 'Facebook',\n    itemStyle: {\n      color: utils.getColor('primary')\n    }\n  },\n  {\n    value: 735,\n    name: 'Youtube',\n    itemStyle: {\n      color: utils.getColor('danger')\n    }\n  },\n  {\n    value: 580,\n    name: 'Twitter',\n    itemStyle: {\n      color: utils.getColor('info')\n    }\n  },\n  {\n    value: 484,\n    name: 'Linkedin',\n    itemStyle: {\n      color: utils.getColor('success')\n    }\n  },\n  {\n    value: 300,\n    name: 'Github',\n    itemStyle: {\n      color: utils.getColor('warning')\n    }\n  }\n];\nconst defaultRadius = { radius: '55%' };\nconst smallRadius = { radius: '48%' };\n\nconst echartsPieMultipleChartInit = () => {\n  const $echartPieMultipleChartEl = document.querySelector('.echart-pie-multiple-chart');\n\n  if ($echartPieMultipleChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($echartPieMultipleChartEl, 'options');\n    const chart = window.echarts.init($echartPieMultipleChartEl);\n\n    const getDefaultOptions = () => ({\n      title: [\n        {\n          text: 'Pie Multiple Chart',\n          left: 'center',\n          textStyle: {\n            color: utils.getGrays()['600']\n          }\n        }\n      ],\n\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n\n      series: [\n        {\n          type: 'pie',\n          radius: window.innerWidth < 450 ? '48%' : '55%',\n          center: ['25%', '50%'],\n          data: data1,\n          label: {\n            show: false\n          }\n        },\n        {\n          type: 'pie',\n          radius: window.innerWidth < 450 ? '48%' : '55%',\n          center: ['75%', '50%'],\n          avoidLabelOverlap: false,\n          label: {\n            show: false\n          },\n          data: data2\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    //- set chart radius on window resize\n    utils.resize(() => {\n      if (window.innerWidth < 450) {\n        chart.setOption({\n          series: [smallRadius, smallRadius]\n        });\n      } else {\n        chart.setOption({\n          series: [defaultRadius, defaultRadius]\n        });\n      }\n    });\n  }\n};\n\nexport default echartsPieMultipleChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Pie Chart                              */\n/* -------------------------------------------------------------------------- */\n\nconst echartsRadarChartInit = () => {\n  const $radarChartEl = document.querySelector('.echart-radar-chart-example');\n\n  if ($radarChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($radarChartEl, 'options');\n    const chart = window.echarts.init($radarChartEl);\n\n    const getDefaultOptions = () => ({\n      legend: {\n        orient: 'vertical',\n        left: 'left',\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n\n      radar: {\n        indicator: [\n          { name: 'Marketing', max: 6500 },\n          { name: 'Admin', max: 16000 },\n          { name: 'Tech', max: 30000 },\n          { name: 'Support', max: 38000 },\n          { name: 'Dev ', max: 52000 },\n          { name: 'Sales ', max: 25000 }\n        ],\n        radius: 120,\n        splitLine: {\n          lineStyle: {\n            color: utils.rgbaColor(utils.getGrays()['700'])\n          }\n        }\n      },\n\n      series: [\n        {\n          type: 'radar',\n          data: [\n            {\n              value: [4200, 3000, 20000, 35000, 50000, 18000],\n              name: 'Data A',\n              itemStyle: {\n                color: utils.getColor('primary')\n              }\n            },\n            {\n              value: [5000, 14000, 28000, 26000, 42000, 21000],\n              name: 'Data B',\n              itemStyle: {\n                color: utils.getColor('warning')\n              }\n            }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsRadarChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Pie Chart                              */\n/* -------------------------------------------------------------------------- */\n\nconst echartsRadarCustomizedChartInit = () => {\n  const $radarChartEl = document.querySelector('.echart-radar-customized-chart');\n  function getFormatter(params) {\n    const indicators = [\n      ['Marketing', 'Sales', 'Dev', 'Support', 'Tech', 'Admin'],\n      ['Language', 'Math', 'English', 'Physics', 'Chemistry', 'Biology']\n    ];\n    const num = params.seriesIndex;\n    return `<strong > ${params.name} </strong>\n    <div class=\"fs--1 text-600\">\n      <strong >${indicators[params.seriesIndex][0]}</strong>: ${params.value[0]}  <br>\n      <strong>${indicators[num][1]}</strong>: ${params.value[1]}  <br>\n      <strong>${indicators[num][2]}</strong>: ${params.value[2]}  <br>\n      <strong>${indicators[num][3]}</strong>: ${params.value[3]}  <br>\n      <strong>${indicators[num][4]}</strong>: ${params.value[4]}  <br>\n      <strong>${indicators[num][5]}</strong>: ${params.value[5]}  <br>\n    </div>`;\n  }\n\n  if ($radarChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($radarChartEl, 'options');\n    const chart = window.echarts.init($radarChartEl);\n\n    const getDefaultOptions = () => ({\n      legend: {\n        orient: 'vertical',\n        left: 'left',\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: getFormatter\n      },\n\n      radar: [\n        {\n          radius: window.innerWidth < 576 ? 90 : 120,\n          startAngle: 90,\n          splitNumber: 4,\n          shape: 'circle',\n          center: window.innerWidth < 992 ? ['50%', '30%'] : ['25%', '50%'],\n          indicator: [\n            { name: 'Admin', max: 6500 },\n            { name: 'Tech', max: 16000 },\n            { name: 'Support', max: 30000 },\n            { name: 'Dev', max: 38000 },\n            { name: 'Sales', max: 52000 },\n            { name: 'Marketing', max: 25000 }\n          ],\n          name: {\n            formatter: '{value}',\n            textStyle: {\n              color: utils.getGrays()['700']\n            }\n          },\n          splitLine: {\n            lineStyle: {\n              color: utils.rgbaColor(utils.getGrays()['700'])\n            }\n          }\n        },\n\n        {\n          indicator: [\n            { text: 'Language', max: 150 },\n            { text: 'Math', max: 150 },\n            { text: 'English', max: 150 },\n            { text: 'physics', max: 120 },\n            { text: 'Chemistry', max: 108 },\n            { text: 'Biology', max: 72 }\n          ],\n          radius: window.innerWidth < 576 ? 90 : 120,\n          center: window.innerWidth < 992 ? ['50%', '75%'] : ['75%', '50%'],\n          splitLine: {\n            lineStyle: {\n              color: utils.rgbaColor(utils.getGrays()['700'])\n            }\n          },\n          name: {\n            textStyle: {\n              color: utils.rgbaColor(utils.getGrays()['1000']),\n              backgroundColor: utils.rgbaColor(utils.getGrays()['100']),\n              borderRadius: 3,\n              padding: [3, 5]\n            }\n          }\n        }\n      ],\n\n      series: [\n        {\n          type: 'radar',\n          data: [\n            {\n              value: [5200, 4000, 20000, 30000, 20000, 18000],\n              name: 'Data A',\n              itemStyle: {\n                color: utils.getColor('info')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors()['info'], 0.3)\n              }\n            },\n            {\n              value: [5000, 12000, 28000, 26000, 32000, 21000],\n              name: 'Data B',\n              itemStyle: {\n                color: utils.getColor('success')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors()['success'], 0.3)\n              }\n            }\n          ]\n        },\n\n        {\n          type: 'radar',\n          radarIndex: 1,\n          data: [\n            {\n              value: [130, 110, 130, 100, 99, 70],\n              name: 'Data C',\n              symbol: 'rect',\n              symbolSize: 12,\n              lineStyle: {\n                type: 'dashed'\n              },\n              itemStyle: {\n                color: utils.getColor('warning')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors()['warning'], 0.3)\n              },\n              label: {\n                show: true,\n                formatter: function (params) {\n                  return params.value;\n                },\n                color: utils.getGrays()['700']\n              }\n            },\n            {\n              value: [100, 93, 50, 90, 70, 60],\n              name: 'Data D',\n              itemStyle: {\n                color: utils.getColor('danger')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors()['danger'], 0.3)\n              }\n            }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n    //- set chart position on Window resize\n    utils.resize(() => {\n      if (window.innerWidth < 992) {\n        chart.setOption({\n          radar: [\n            {\n              center: ['50%', '30%']\n            },\n            {\n              center: ['50%', '75%']\n            }\n          ]\n        });\n      } else {\n        chart.setOption({\n          radar: [\n            {\n              center: ['25%', '50%']\n            },\n            {\n              center: ['75%', '50%']\n            }\n          ]\n        });\n      }\n\n      if (window.innerWidth < 576) {\n        chart.setOption({\n          radar: [\n            {\n              radius: 90\n            },\n            {\n              radius: 90\n            }\n          ]\n        });\n      } else {\n        chart.setOption({\n          radar: [\n            {\n              radius: 120\n            },\n            {\n              radius: 120\n            }\n          ]\n        });\n      }\n    });\n  }\n};\n\nexport default echartsRadarCustomizedChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                      Echarts Radar Multiple Chart                          */\n/* -------------------------------------------------------------------------- */\n\nconst echartsRadarMultipleChartInit = () => {\n  const $radarChartEl = document.querySelector('.echart-radar-multiple-chart');\n\n  if ($radarChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($radarChartEl, 'options');\n    const chart = window.echarts.init($radarChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    const getCenter = () => {\n      if (window.innerWidth < 1540 && window.innerWidth > 992) {\n        return [\n          ['25%', '40%'],\n          ['50%', '75%'],\n          ['75%', '40%']\n        ];\n      } else if (window.innerWidth < 992) {\n        return [\n          ['50%', '20%'],\n          ['50%', '50%'],\n          ['50%', '80%']\n        ];\n      } else {\n        return [\n          ['15%', '50%'],\n          ['50%', '50%'],\n          ['85%', '50%']\n        ];\n      }\n    };\n\n    const getDefaultOptions = () => ({\n      legend: {\n        left: 'left',\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n\n      radar: [\n        {\n          indicator: [\n            { text: 'Brand', max: 100 },\n            { text: 'content', max: 100 },\n            { text: 'Usability', max: 100 },\n            { text: 'Features', max: 100 }\n          ],\n          center: getCenter()[0],\n          radius: 85,\n          splitLine: {\n            lineStyle: {\n              color: utils.rgbaColor(utils.getGrays()['700'])\n            }\n          }\n        },\n        {\n          indicator: [\n            { text: 'Exterior', max: 100 },\n            { text: 'Take pictures', max: 100 },\n            { text: 'system', max: 100 },\n            { text: 'performance', max: 100 },\n            { text: 'screen', max: 100 }\n          ],\n          radius: 85,\n          center: getCenter()[1],\n          splitLine: {\n            lineStyle: {\n              color: utils.rgbaColor(utils.getGrays()['700'])\n            }\n          }\n        },\n        {\n          indicator: months.map(month => ({\n            text: month,\n            max: 100\n          })),\n          center: getCenter()[2],\n          radius: 85,\n          splitLine: {\n            lineStyle: {\n              color: utils.rgbaColor(utils.getGrays()['700'])\n            }\n          }\n        }\n      ],\n\n      series: [\n        {\n          type: 'radar',\n          tooltip: {\n            trigger: 'item'\n          },\n          areaStyle: {\n            color: utils.rgbaColor(utils.getColors()['info'], 0.5)\n          },\n          data: [\n            {\n              value: [60, 73, 85, 40],\n              name: 'A software',\n              itemStyle: {\n                color: utils.getColor('info')\n              }\n            }\n          ]\n        },\n        {\n          type: 'radar',\n          radarIndex: 1,\n          data: [\n            {\n              value: [85, 90, 90, 95, 95],\n              name: 'A staple mobile phone',\n              itemStyle: {\n                color: utils.rgbaColor(utils.getColors()['primary'], 0.8)\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors()['primary'], 0.3)\n              }\n            },\n            {\n              value: [95, 80, 75, 90, 93],\n              name: 'A fruit phone',\n              itemStyle: {\n                color: utils.getColor('success')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors()['success'], 0.3)\n              }\n            }\n          ]\n        },\n        {\n          type: 'radar',\n          radarIndex: 2,\n          areaStyle: {},\n          tooltip: {\n            show: false\n          },\n          data: [\n            {\n              name: 'Precipitation',\n              value: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 75.6, 82.2, 48.7, 18.8, 6.0, 2.3],\n              itemStyle: {\n                color: utils.getColor('primary')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors()['primary'], 0.5)\n              }\n            },\n            {\n              name: 'Evaporation',\n              value: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 35.6, 62.2, 32.6, 20.0, 6.4, 3.3],\n              itemStyle: {\n                color: utils.getColor('warning')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors()['warning'], 0.5)\n              }\n            }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    // - set chart position on Window resize\n    utils.resize(() => {\n      chart.setOption({\n        radar: getCenter().map(item => ({\n          center: item\n        }))\n      });\n    });\n  }\n};\n\nexport default echartsRadarMultipleChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                        Echarts Scatter Basic Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsScatterBasicChartInit = () => {\n  const $basicScatterChartEl = document.querySelector('.echart-basic-scatter-chart-example');\n\n  if ($basicScatterChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($basicScatterChartEl, 'options');\n    const chart = window.echarts.init($basicScatterChartEl);\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'item',\n        axisPointer: {\n          type: 'none'\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0\n      },\n      xAxis: {\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      yAxis: {\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      series: [\n        {\n          // symbolSize: val => val[2] * 2,\n          data: [\n            [10.0, 8.04],\n            [8.07, 6.95],\n            [13.0, 7.58],\n            [9.05, 8.81],\n            [11.0, 8.33],\n            [14.0, 7.66],\n            [13.4, 6.81],\n            [10.0, 6.33],\n            [14.0, 8.96],\n            [12.5, 6.82],\n            [9.15, 7.2],\n            [11.5, 7.2],\n            [3.03, 4.23],\n            [12.2, 7.83],\n            [2.02, 4.47],\n            [1.05, 3.33],\n            [4.05, 4.96],\n            [6.03, 7.24],\n            [12.0, 6.26],\n            [12.0, 8.84],\n            [7.08, 5.82],\n            [5.02, 5.68]\n          ],\n          type: 'scatter',\n          itemStyle: {\n            color: utils.getColor('danger')\n          }\n        }\n      ],\n      grid: {\n        right: 8,\n        left: 5,\n        bottom: 5,\n        top: 8,\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsScatterBasicChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                      Echarts Scatter Quartet Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsScatterQuartetChartInit = () => {\n  const $scatterQuartetChartEl = document.querySelector('.echart-scatter-quartet-chart-example');\n\n  if ($scatterQuartetChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($scatterQuartetChartEl, 'options');\n    const chart = window.echarts.init($scatterQuartetChartEl);\n\n    const dataAll = [\n      [\n        [10.0, 8.04],\n        [8.0, 6.95],\n        [13.0, 7.58],\n        [9.0, 8.81],\n        [11.0, 8.33],\n        [14.0, 9.96],\n        [6.0, 7.24],\n        [4.0, 4.26],\n        [12.0, 10.84],\n        [7.0, 4.82],\n        [5.0, 5.68]\n      ],\n      [\n        [10.0, 9.14],\n        [8.0, 8.14],\n        [13.0, 8.74],\n        [9.0, 8.77],\n        [11.0, 9.26],\n        [14.0, 8.1],\n        [6.0, 6.13],\n        [4.0, 3.1],\n        [12.0, 9.13],\n        [7.0, 7.26],\n        [5.0, 4.74]\n      ],\n      [\n        [10.0, 7.46],\n        [8.0, 6.77],\n        [13.0, 12.74],\n        [9.0, 7.11],\n        [11.0, 7.81],\n        [14.0, 8.84],\n        [6.0, 6.08],\n        [4.0, 5.39],\n        [12.0, 8.15],\n        [7.0, 6.42],\n        [5.0, 5.73]\n      ],\n      [\n        [8.0, 6.58],\n        [8.0, 5.76],\n        [8.0, 7.71],\n        [8.0, 8.84],\n        [8.0, 8.47],\n        [8.0, 7.04],\n        [8.0, 5.25],\n        [19.0, 12.5],\n        [8.0, 5.56],\n        [8.0, 7.91],\n        [8.0, 6.89]\n      ]\n    ];\n\n    const xAxis = () => ({\n      axisLabel: {\n        color: utils.getGrays()['600']\n      },\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: utils.getGrays()['300']\n        }\n      },\n\n      splitLine: {\n        show: true,\n        lineStyle: {\n          color: utils.getGrays()['200']\n        }\n      }\n    });\n\n    const yAxis = () => ({\n      axisLabel: {\n        color: utils.getGrays()['600']\n      },\n      splitLine: {\n        show: true,\n        lineStyle: {\n          color: utils.getGrays()['200']\n        }\n      },\n\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: utils.getGrays()['300']\n        }\n      }\n    });\n\n    const markLineOpt = {\n      animation: false,\n      label: {\n        formatter: 'y = 0.5 * x + 3',\n        align: 'right',\n        color: utils.getGrays()['600'],\n        fontWeight: 600\n      },\n      lineStyle: {\n        type: 'solid'\n      },\n      tooltip: {\n        formatter: 'y = 0.5 * x + 3'\n      },\n      data: [\n        [\n          {\n            coord: [0, 3],\n            symbol: 'none'\n          },\n          {\n            coord: [20, 13],\n            symbol: 'none'\n          }\n        ]\n      ]\n    };\n    const gridMdUp = [\n      { left: '7%', top: '10%', width: '38%', height: '38%' },\n      { right: '7%', top: '10%', width: '38%', height: '38%' },\n      { left: '7%', bottom: '7%', width: '38%', height: '38%' },\n      { right: '7%', bottom: '7%', width: '38%', height: '38%' }\n    ];\n\n    const gridMdDown = [\n      { left: 6, right: 7, top: '4%', height: '20%' },\n      { left: 6, right: 7, top: '29%', height: '20%' },\n      { left: 6, right: 7, bottom: '26%', height: '20%' },\n      { left: 6, right: 7, bottom: 25, height: '20%' }\n    ];\n\n    const getDefaultOptions = () => ({\n      color: [\n        utils.getColor('primary'),\n        utils.getColor('success'),\n        utils.getColor('warning'),\n        utils.getColor('danger')\n      ],\n      tooltip: {\n        trigger: 'item',\n        axisPointer: {\n          type: 'none'\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: 'Group {a}: ({c})'\n      },\n      title: {\n        text: \"Anscombe's quartet\",\n        left: 'center',\n        top: 0,\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      grid: window.innerWidth < 768 ? gridMdDown : gridMdUp,\n      xAxis: [\n        { gridIndex: 0, min: 0, max: 20, ...xAxis() },\n        { gridIndex: 1, min: 0, max: 20, ...xAxis() },\n        { gridIndex: 2, min: 0, max: 20, ...xAxis() },\n        { gridIndex: 3, min: 0, max: 20, ...xAxis() }\n      ],\n      yAxis: [\n        { gridIndex: 0, min: 0, max: 15, ...yAxis() },\n        { gridIndex: 1, min: 0, max: 15, ...yAxis() },\n        { gridIndex: 2, min: 0, max: 15, ...yAxis() },\n        { gridIndex: 3, min: 0, max: 15, ...yAxis() }\n      ],\n      series: [\n        {\n          name: 'I',\n          type: 'scatter',\n          xAxisIndex: 0,\n          yAxisIndex: 0,\n          data: dataAll[0],\n          markLine: markLineOpt\n        },\n        {\n          name: 'II',\n          type: 'scatter',\n          xAxisIndex: 1,\n          yAxisIndex: 1,\n          data: dataAll[1],\n          markLine: markLineOpt\n        },\n        {\n          name: 'III',\n          type: 'scatter',\n          xAxisIndex: 2,\n          yAxisIndex: 2,\n          data: dataAll[2],\n          markLine: markLineOpt\n        },\n        {\n          name: 'IV',\n          type: 'scatter',\n          xAxisIndex: 3,\n          yAxisIndex: 3,\n          data: dataAll[3],\n          markLine: markLineOpt\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    utils.resize(() => {\n      if (window.innerWidth < 768) {\n        chart.setOption({\n          grid: gridMdDown\n        });\n      } else {\n        chart.setOption({\n          grid: gridMdUp\n        });\n      }\n    });\n  }\n};\n\nexport default echartsScatterQuartetChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                   Echarts Scatter singlr Axis Chart                        */\n/* -------------------------------------------------------------------------- */\n\nconst echartsScatterSingleAxisChartInit = () => {\n  const $scatterSingleAxisChartEl = document.querySelector(\n    '.echart-scatter-single-axis-chart-example'\n  );\n\n  if ($scatterSingleAxisChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($scatterSingleAxisChartEl, 'options');\n    const chart = window.echarts.init($scatterSingleAxisChartEl);\n\n    const hours = [\n      '12am',\n      '1am',\n      '2am',\n      '3am',\n      '4am',\n      '5am',\n      '6am',\n      '7am',\n      '8am',\n      '9am',\n      '10am',\n      '11am',\n      '12pm',\n      '1pm',\n      '2pm',\n      '3pm',\n      '4pm',\n      '5pm',\n      '6pm',\n      '7pm',\n      '8pm',\n      '9pm',\n      '10pm',\n      '11pm'\n    ];\n\n    const days = ['Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday', 'Sunday'];\n\n    const data = [];\n    for (let i = 0; i < 7; i += 1) {\n      for (let j = 0; j < 24; j += 1) {\n        data.push([j, i, utils.getRandomNumber(0, 10)]);\n      }\n    }\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'item',\n        axisPointer: {\n          type: 'none'\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        position: 'top',\n        formatter: function (params) {\n          return `\n            ${days[params.value[1]]} <br/>\n            ${hours[params.value[0]]} : ${params.value[2]}\n          `;\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: hours,\n        boundaryGap: false,\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        axisLine: {\n          show: false\n        },\n        axisTick: {\n          lineStyle: {\n            color: utils.getGrays()['600']\n          }\n        }\n      },\n      yAxis: {\n        type: 'category',\n        data: days,\n        axisLine: {\n          show: false\n        },\n        axisTick: {\n          lineStyle: {\n            color: utils.getGrays()['600']\n          }\n        },\n        axisLabel: {\n          margin: 15\n        }\n      },\n      series: [\n        {\n          name: 'Punch Card',\n          type: 'scatter',\n          symbolSize: val => val[2] * 2,\n          data: data,\n          animationDelay: function (idx) {\n            return idx * 5;\n          },\n          itemStyle: {\n            color: utils.getColor('primary')\n          }\n        }\n      ],\n      grid: {\n        right: 12,\n        left: 5,\n        bottom: 5,\n        top: 5,\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsScatterSingleAxisChartInit;\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                    Echarts Stacked Area  Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsStackedAreaChartInit = () => {\n  const $stackedAreaChartEl = document.querySelector('.echart-stacked-area-chart-example');\n\n  if ($stackedAreaChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($stackedAreaChartEl, 'options');\n    const chart = window.echarts.init($stackedAreaChartEl);\n\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        },\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'category',\n        data: days,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          margin: 15,\n          formatter: value => value.substring(0, 3)\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      series: [\n        {\n          name: 'Matcha Latte',\n          type: 'line',\n          symbolSize: 10,\n          stack: 'product',\n          data: [120, 132, 101, 134, 90, 230, 210],\n          areaStyle: {\n            color: utils.rgbaColor(utils.getColor('info'), 0.3)\n          },\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('info'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('info')\n          },\n          symbol: 'circle'\n        },\n        {\n          name: 'Milk Tea',\n          type: 'line',\n          symbolSize: 10,\n          stack: 'product',\n          data: [220, 182, 191, 234, 290, 330, 310],\n          areaStyle: {\n            color: utils.rgbaColor(utils.getColor('success'), 0.3)\n          },\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('success'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('success')\n          },\n          symbol: 'circle'\n        },\n        {\n          name: 'Cheese Cocoa',\n          type: 'line',\n          symbolSize: 10,\n          stack: 'product',\n          data: [150, 232, 201, 154, 190, 330, 410],\n          areaStyle: {\n            color: utils.rgbaColor(utils.getColor('danger'), 0.3)\n          },\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('danger'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('danger')\n          },\n          symbol: 'circle'\n        },\n        {\n          name: 'Cheese Brownie',\n          type: 'line',\n          symbolSize: 10,\n          stack: 'product',\n          data: [320, 332, 301, 334, 390, 330, 320],\n          areaStyle: {\n            color: utils.rgbaColor(utils.getColor('warning'), 0.3)\n          },\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('warning'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('warning')\n          },\n          symbol: 'circle'\n        },\n        {\n          name: 'Matcha Cocoa',\n          type: 'line',\n          symbolSize: 10,\n          stack: 'product',\n          data: [820, 932, 901, 934, 1290, 1330, 1320],\n          areaStyle: {\n            color: utils.rgbaColor(utils.getColor('primary'), 0.3)\n          },\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          symbol: 'circle'\n        }\n      ],\n      grid: { right: 10, left: 5, bottom: 5, top: 8, containLabel: true }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsStackedAreaChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsHorizontalStackedChartInit = () => {\n  const $horizontalStackChartEl = document.querySelector(\n    '.echart-horizontal-stacked-chart-example'\n  );\n\n  if ($horizontalStackChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($horizontalStackChartEl, 'options');\n    const chart = window.echarts.init($horizontalStackChartEl);\n\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    const getDefaultOptions = () => ({\n      color: [\n        utils.getColor('info'),\n        utils.getColor('danger'),\n        utils.getColor('warning'),\n        utils.getColor('success'),\n        utils.getColor('primary')\n      ],\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'shadow'\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: tooltipFormatter\n      },\n      toolbox: {\n        feature: {\n          magicType: {\n            type: ['stack', 'tiled']\n          }\n        },\n        right: 0\n      },\n      legend: {\n        data: ['Direct', 'Mail Ad', 'Affiliate Ad', 'Video Ad', 'Search Engine'],\n        textStyle: {\n          color: utils.getGrays()['600']\n        },\n        left: 0\n      },\n      xAxis: {\n        type: 'value',\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['500']\n        },\n        splitLine: {\n          lineStyle: {\n            show: true,\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      yAxis: {\n        type: 'category',\n        data: days,\n        axisLine: {\n          lineStyle: {\n            show: true,\n            color: utils.getGrays()['300']\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['500'],\n          formatter: value => value.substring(0, 3)\n        }\n      },\n      series: [\n        {\n          name: 'Direct',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true,\n            textStyle: {\n              color: '#fff'\n            }\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [320, 302, 301, 334, 390, 330, 320]\n        },\n        {\n          name: 'Mail Ad',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [220, 188, 301, 250, 190, 230, 210]\n        },\n        {\n          name: 'Affiliate Ad',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true,\n            textStyle: {\n              color: '#fff'\n            }\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [220, 182, 191, 234, 290, 330, 310]\n        },\n        {\n          name: 'Video Ad',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true,\n            textStyle: {\n              color: '#fff'\n            }\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [150, 212, 201, 154, 190, 330, 410]\n        },\n        {\n          name: 'Search Engine',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [820, 832, 901, 934, 1290, 1330, 1320]\n        }\n      ],\n      grid: {\n        right: 15,\n        left: 5,\n        bottom: 5,\n        top: '15%',\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsHorizontalStackedChartInit;\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                     Echarts Stacked Line Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsStackedLineChartInit = () => {\n  const $stackedLineChartEl = document.querySelector('.echart-stacked-line-chart-example');\n\n  if ($stackedLineChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($stackedLineChartEl, 'options');\n    const chart = window.echarts.init($stackedLineChartEl);\n\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        },\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'category',\n        data: days,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          margin: 15,\n          formatter: value => value.substring(0, 3)\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200'],\n            type: 'dashed'\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      series: [\n        {\n          name: 'Matcha Latte',\n          type: 'line',\n          symbolSize: 6,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('info'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('info')\n          },\n          symbol: 'circle',\n          stack: 'product',\n          data: [120, 132, 101, 134, 90, 230, 210]\n        },\n        {\n          name: 'Milk Tea',\n          type: 'line',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('success'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('success')\n          },\n          symbol: 'circle',\n          stack: 'product',\n          data: [220, 182, 191, 234, 290, 330, 310]\n        },\n        {\n          name: 'Cheese Cocoa',\n          type: 'line',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('danger'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('danger')\n          },\n          symbol: 'circle',\n          stack: 'product',\n          data: [150, 232, 201, 154, 190, 330, 410]\n        },\n        {\n          name: 'Cheese Brownie',\n          type: 'line',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('warning'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('warning')\n          },\n          symbol: 'circle',\n          stack: 'product',\n          data: [320, 332, 301, 334, 390, 330, 320]\n        },\n        {\n          name: 'Matcha Cocoa',\n          type: 'line',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          symbol: 'circle',\n          stack: 'product',\n          data: [820, 932, 901, 934, 1290, 1330, 1320]\n        }\n      ],\n      grid: { right: 10, left: 5, bottom: 5, top: 8, containLabel: true }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsStackedLineChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n\nconst echartsStackedVerticalChartInit = () => {\n  const $stackedVerticalChart = document.querySelector('.echart-stacked-vertival-chart-example');\n\n  if ($stackedVerticalChart) {\n    const userOptions = utils.getData($stackedVerticalChart, 'options');\n    const chart = window.echarts.init($stackedVerticalChart);\n    let xAxisData = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    let data1 = [20, 18, 15, 20, 12, 15, 10];\n    let data2 = [30, 20, 20, 25, 20, 15, 10];\n    let data3 = [35, 32, 40, 50, 30, 25, 15];\n    let data4 = [15, 25, 20, 18, 10, 15, 25];\n\n    const emphasisStyle = {\n      itemStyle: {\n        shadowColor: utils.rgbaColor(utils.getColor('dark'), 0.3)\n      }\n    };\n\n    const getDefaultOptions = () => ({\n      color: [\n        utils.getColor('primary'),\n        utils.getColor('info'),\n        localStorage.getItem('theme') === 'dark' ? '#229BD2' : '#73D3FE',\n        localStorage.getItem('theme') === 'dark' ? '#195979' : '#A9E4FF',\n      ],\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['900']},\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      legend: {\n        data: ['Urgent', 'High', 'Medium', 'Low'],\n        textStyle: {\n          color: utils.getGrays()['700']\n        }\n      },\n      xAxis: {\n        data: xAxisData,\n        splitLine: { show: false, },\n        splitArea: { show: false, },\n\n        axisLabel: {\n          color: utils.getGrays()['600'],\n          margin:8,\n        },\n\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: \"dashed\"\n          }\n        },\n        axisTick: {\n          show: false,\n        }\n      },\n      yAxis: {\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: \"dashed\"\n          }\n        },\n        axisLabel: {\n          color: utils.getGrays()['600'],\n        },\n        position: \"right\"\n      },\n      series: [\n        {\n          name: 'Urgent',\n          type: 'bar',\n          stack: 'one',\n          emphasis: emphasisStyle,\n          data: data1\n        },\n        {\n          name: 'High',\n          type: 'bar',\n          stack: 'one',\n          emphasis: emphasisStyle,\n          data: data2\n        },\n        {\n          name: 'Medium',\n          type: 'bar',\n          stack: 'one',\n          emphasis: emphasisStyle,\n          data: data3\n        },\n        {\n          name: 'Low',\n          type: 'bar',\n          stack: 'one',\n          emphasis: emphasisStyle,\n          data: data4,\n          itemStyle: {\n            borderRadius: [2, 2, 0, 0]\n          },\n        }\n      ],\n\n      barWidth: \"15px\",\n      grid: {\n        top: '8%',\n        bottom: 10,\n        left: 0,\n        right: 2,\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsStackedVerticalChartInit;\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Step Line Chart                        */\n/* -------------------------------------------------------------------------- */\n\nconst echartsStepLineChartInit = () => {\n  const $stepLineChartEl = document.querySelector('.echart-step-line-chart-example');\n\n  if ($stepLineChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($stepLineChartEl, 'options');\n    const chart = window.echarts.init($stepLineChartEl);\n\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    const getDefaultOptions = () => ({\n      color: [utils.getColor('danger'), utils.getColor('warning'), utils.getColor('primary')],\n\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getColors().dark },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: tooltipFormatter,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: days,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          formatter: value => value.substring(0, 3),\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        },\n        axisPointer: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      series: [\n        {\n          name: 'Step Start',\n          type: 'line',\n          step: 'start',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          symbol: 'circle',\n          data: [120, 132, 101, 134, 90, 230, 210]\n        },\n        {\n          name: 'Step Middle',\n          type: 'line',\n          step: 'middle',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('warning'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('warning')\n          },\n          symbol: 'circle',\n          data: [220, 282, 201, 234, 290, 430, 410]\n        },\n        {\n          name: 'Step End',\n          type: 'line',\n          step: 'end',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays().white,\n            borderColor: utils.getColor('danger'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('danger')\n          },\n          symbol: 'circle',\n          data: [450, 432, 401, 454, 590, 530, 510]\n        }\n      ],\n      grid: { right: '3%', left: '8%', bottom: '10%', top: '5%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsStepLineChartInit;\n","import { docReady } from './utils';\nimport echartsLineChartInit from './charts/echarts/examples/basic-line-chart';\nimport echartsPieChartInit from './charts/echarts/examples/pie-chart';\nimport echartsBasicBarChartInit from './charts/echarts/examples/basic-bar-chart';\nimport echartsDoughnutChartInit from './charts/echarts/examples/doughnut-chart';\nimport echartsLineAreaChartInit from './charts/echarts/examples/line-area-chart';\nimport echartsStackedLineChartInit from './charts/echarts/examples/stacked-line-chart';\nimport echartsStackedAreaChartInit from './charts/echarts/examples/stacked-area-chart';\nimport echartsLineMarkerChartInit from './charts/echarts/examples/line-marker-chart';\nimport echartsAreaPiecesChartInit from './charts/echarts/examples/area-pieces-chart';\nimport echartsLineRaceChartInit from './charts/echarts/examples/line-race-chart';\nimport echartsStepLineChartInit from './charts/echarts/examples/step-line-chart';\nimport echartsLineGradientChartInit from './charts/echarts/examples/line-gradient-chart';\nimport echartsDynamicLineChartInit from './charts/echarts/examples/dynamic-line-chart';\nimport echartsHorizontalBarChartInit from './charts/echarts/examples/horizontal-bar-chart';\nimport echartsBarNegativeChartInit from './charts/echarts/examples/bar-negative-chart';\nimport echartsBarSeriesChartInit from './charts/echarts/examples/bar-series-chart';\nimport echartsWaterFallChartInit from './charts/echarts/examples/bar-waterfall-chart';\nimport echartsHorizontalStackedChartInit from './charts/echarts/examples/stacked-horizontal-bar-chart';\nimport echartsBarRaceChartInit from './charts/echarts/examples/bar-race-chart';\nimport echartsGradientBarChartInit from './charts/echarts/examples/gradient-bar-chart';\nimport echartsBarLineChartInit from './charts/echarts/examples/bar-line-mixed-chart';\nimport echartsBasicCandlestickChartInit from './charts/echarts/examples/basic-candlestick-chart';\nimport echartsCandlestickMixedChartInit from './charts/echarts/examples/candle-stick-mixed-chart';\nimport echartsUsaMapInit from './charts/echarts/examples/map-usa';\nimport echartsScatterBasicChartInit from './charts/echarts/examples/scatter-basic-chart';\nimport echartsBubbleChartInit from './charts/echarts/examples/bubble-chart';\nimport echartsScatterQuartetChartInit from './charts/echarts/examples/scatter-quartet';\nimport echartsScatterSingleAxisChartInit from './charts/echarts/examples/scatter-single-axis-chart';\nimport echartsBasicGaugeChartInit from './charts/echarts/examples/basic-gauge-chart';\nimport echartsGaugeProgressChartInit from './charts/echarts/examples/gauge-progress-chart';\nimport echartsGaugeRingChartInit from './charts/echarts/examples/gauge-ring-chart';\nimport echartsGaugeMultiRingChartInit from './charts/echarts/examples/gauge-multi-ring-chart';\nimport echartsGaugeMultiTitleChartInit from './charts/echarts/examples/gauge-multi-title-chart';\nimport echartsGaugeGradeChartInit from './charts/echarts/examples/gauge-grade-chart';\nimport echartsLineLogChartInit from './charts/echarts/examples/line-log-chart';\nimport echartsLineShareDatasetChartInit from './charts/echarts/examples/line-share-dataset-chart';\nimport echartsBarTimelineChartInit from './charts/echarts/examples/bar-timeline-chart';\nimport echartsDoughnutRoundedChartInit from './charts/echarts/examples/doughnut-rounded-chart';\nimport echartsPieLabelAlignChartInit from './charts/echarts/examples/pie-label-align-chart';\nimport echartsRadarChartInit from './charts/echarts/examples/radar-chart';\nimport echartsRadarCustomizedChartInit from './charts/echarts/examples/radar-customized-chart';\nimport echartsRadarMultipleChartInit from './charts/echarts/examples/radar-multiple-chart';\nimport echartsPieMultipleChartInit from './charts/echarts/examples/pie-multiple-chart';\nimport echartsHeatMapChartInit from './charts/echarts/examples/heatmap-chart';\nimport echartsHeatMapSingleSeriesChartInit from './charts/echarts/examples/heatmap-single-series-chart';\nimport echartsBarStackedChartInit from './charts/echarts/examples/bar-stacked-chart';\nimport echartsPieEdgeAlignChartInit from './charts/echarts/examples/pie-edge-align-chart';\nimport echartsStackedVerticalChartInit from './charts/echarts/examples/stacked-vertical-chart';\nimport echartsNestedPiesChartInit from './charts/echarts/examples/nested-pies-chart';\n\n/* -------------------------------------------------------------------------- */\n/*                            Theme Initialization                            */\n/* -------------------------------------------------------------------------- */\ndocReady(echartsLineChartInit);\ndocReady(echartsLineAreaChartInit);\ndocReady(echartsPieChartInit);\ndocReady(echartsBasicBarChartInit);\ndocReady(echartsDoughnutChartInit);\ndocReady(echartsStackedLineChartInit);\ndocReady(echartsStackedAreaChartInit);\ndocReady(echartsLineMarkerChartInit);\ndocReady(echartsAreaPiecesChartInit);\ndocReady(echartsLineRaceChartInit);\ndocReady(echartsStepLineChartInit);\ndocReady(echartsLineGradientChartInit);\ndocReady(echartsDynamicLineChartInit);\ndocReady(echartsHorizontalBarChartInit);\ndocReady(echartsBarNegativeChartInit);\ndocReady(echartsBarSeriesChartInit);\ndocReady(echartsWaterFallChartInit);\ndocReady(echartsHorizontalStackedChartInit);\ndocReady(echartsBarRaceChartInit);\ndocReady(echartsGradientBarChartInit);\ndocReady(echartsBarLineChartInit);\ndocReady(echartsBasicCandlestickChartInit);\ndocReady(echartsCandlestickMixedChartInit);\ndocReady(echartsUsaMapInit);\ndocReady(echartsScatterBasicChartInit);\ndocReady(echartsBubbleChartInit);\ndocReady(echartsScatterQuartetChartInit);\ndocReady(echartsScatterSingleAxisChartInit);\ndocReady(echartsBasicGaugeChartInit);\ndocReady(echartsGaugeProgressChartInit);\ndocReady(echartsGaugeRingChartInit);\ndocReady(echartsGaugeMultiRingChartInit);\ndocReady(echartsGaugeMultiTitleChartInit);\ndocReady(echartsGaugeGradeChartInit);\ndocReady(echartsLineLogChartInit);\ndocReady(echartsLineShareDatasetChartInit);\ndocReady(echartsBarTimelineChartInit);\ndocReady(echartsDoughnutRoundedChartInit);\ndocReady(echartsPieLabelAlignChartInit);\ndocReady(echartsRadarChartInit);\ndocReady(echartsRadarCustomizedChartInit);\ndocReady(echartsRadarMultipleChartInit);\ndocReady(echartsPieMultipleChartInit);\ndocReady(echartsHeatMapChartInit);\ndocReady(echartsHeatMapSingleSeriesChartInit);\ndocReady(echartsBarStackedChartInit);\ndocReady(echartsPieEdgeAlignChartInit);\ndocReady(echartsStackedVerticalChartInit);\ndocReady(echartsNestedPiesChartInit);\n"]}